name: Release on tag
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v0.1.5). Leave empty to use latest tag"
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0
          fetch-tags: true   # <— ВАЖЛИВО: тягнемо теги

      - name: Make repo safe for git
        shell: pwsh
        run: git config --global --add safe.directory "$env:GITHUB_WORKSPACE"

      - name: Detect version (tag)
        id: ver
        shell: pwsh
        run: |
          $event    = "${{ github.event_name }}"
          $refType  = "${{ github.ref_type }}"
          $refName  = "${{ github.ref_name }}"
          $inputTag = "${{ github.event.inputs.tag }}"

          if ($event -eq 'push' -and $refType -eq 'tag' -and $refName) {
            $ver = $refName
          } elseif ($inputTag) {
            $ver = $inputTag
          } else {
            # Надійний fallback: беремо останній тег v* за семвер-сортуванням
            $tags = git tag --list "v*" | ForEach-Object { $_ } 
            if ($tags.Count -gt 0) {
              $ver = ($tags | Sort-Object {[version]($_ -replace '^v','0.')} )[-1]
            }
          }

          if (-not $ver) { throw "Could not determine tag version" }
          "VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append
          Write-Host "Using version: $ver"

      - name: Prepare release artifacts
        shell: pwsh
        run: |
          $Root    = "$env:GITHUB_WORKSPACE"
          $BaseDir = Join-Path $Root 'C11\SHIELD4_ODESA'
          $Release = Join-Path $BaseDir 'Release'
          $Archive = Join-Path $BaseDir 'Archive'
          New-Item -ItemType Directory -Force -Path $Release,$Archive | Out-Null

          $Downloads = Join-Path $env:USERPROFILE 'Downloads'
          New-Item -ItemType Directory -Force -Path $Downloads | Out-Null
          $MainZip   = Join-Path $Downloads 'SHIELD4_ODESA_UltimatePack_build.zip'

          $tmp = Join-Path $env:TEMP ('rel_build_' + (Get-Date -Format yyyyMMdd_HHmmss))
          New-Item -ItemType Directory -Force -Path $tmp | Out-Null
          'Release $(Get-Date)' | Set-Content (Join-Path $tmp 'README.txt') -Encoding UTF8
          Compress-Archive -Path (Join-Path $tmp '*') -DestinationPath $MainZip -Force

          pwsh -NoProfile -ExecutionPolicy Bypass -File C11/tools/Manage_Shield4_Release.ps1 `
            -BaseDir $BaseDir -NewReleasePath $MainZip -Version $env:VER -NoUnpack

          $Chk = Join-Path $Archive 'CHECKSUMS.txt'
          New-Item -ItemType File -Force -Path $Chk | Out-Null
          Clear-Content -LiteralPath $Chk
          Get-ChildItem $Release -Filter *.zip -File | ForEach-Object {
            $h = Get-FileHash $_.FullName -Algorithm SHA256
            "$($h.Hash) *$($_.Name)" | Add-Content -LiteralPath $Chk
          }

      - name: Validate (strict)
        shell: pwsh
        run: pwsh -NoProfile -File C11/tools/Validate-Releases.ps1 -All -Strict

      - name: Publish release
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          pwsh -NoProfile -File C11/tools/Publish-Release.ps1 -Version $env:VER -Notes (Get-Content RELEASE_NOTES.md -Raw)

      - name: Upload release artifacts (evidence)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-evidence
          path: |
            C11/SHIELD4_ODESA/Release/*.zip
            C11/SHIELD4_ODESA/Archive/CHECKSUMS.txt
          if-no-files-found: warn
          retention-days: 7

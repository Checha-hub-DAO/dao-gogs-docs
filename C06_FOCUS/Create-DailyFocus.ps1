<#  Create-DailyFocus.ps1  ‚Äî v1.2.1
    -UpdateStatus          : –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ª–æ–≥—É–≤–∞–Ω–Ω—è —Ü–∏–∫–ª—É)
    -UpdateChangelog       : –ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Å —É CHANGELOG
    -NewVersion            : —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó + SHA256 + Composite + CHECKSUMS
    -VerifyChecksums       : –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ SHA256 (–±–µ–∑ –∑–º—ñ–Ω —Ñ–∞–π–ª—ñ–≤)
    -AutoFix               : (—Ä–∞–∑–æ–º –∑ -VerifyChecksums) ‚Äî –ª–æ–≥ —É RestoreLog, –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è CHECKSUMS
    -RegisterTasks         : —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–∞–Ω–∫–æ–≤–æ—ó/–≤–µ—á—ñ—Ä–Ω—å–æ—ó –∑–∞–¥–∞—á—ñ (schtasks)
    -PassThru              : –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–±‚Äô—î–∫—Ç –∑ —à–ª—è—Ö–∞–º–∏
#>

param(
    [string]$Root = ".",
    [switch]$UpdateStatus,
    [switch]$UpdateChangelog,
    [switch]$NewVersion,
    [switch]$VerifyChecksums,
    [switch]$AutoFix,
    [switch]$RegisterTasks,
    [switch]$PassThru
)

$ErrorActionPreference = "Stop"

# --- Helpers ---
function Get-FileHashHex($path) {
    if (!(Test-Path $path)) { return "" }
    return (Get-FileHash -Algorithm SHA256 -Path $path).Hash
}
function Add-Log($file, $msg) {
    $ts = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
    Add-Content -Path $file -Value ("- [{0}] {1}" -f $ts, $msg)
}

# --- Paths ---
$dashPath = Join-Path $Root "FOCUS_Dashboard.md"
$restPath = Join-Path $Root "FOCUS_RestoreLog.md"
$timeline = Join-Path $Root "FOCUS_Timeline.md"
$changelog = Join-Path $Root "CHANGELOG.md"
$checksumFile = Join-Path $Root "FOCUS_CHECKSUMS.txt"
$Date = Get-Date -Format "yyyy-MM-dd"

# --- Verify Checksums (read-only unless -AutoFix) ---
if ($VerifyChecksums) {
    if (!(Test-Path $checksumFile)) {
        Write-Warning "–§–∞–π–ª $checksumFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        exit
    }

    # –í–∏—Ç—è–≥—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –±–ª–æ–∫ SHA256 (4 —Ä—è–¥–∫–∏)
    $lines = Get-Content $checksumFile | Where-Object { $_ -match "SHA256" }
    if ($lines.Count -lt 4) {
        Write-Warning "–£ $checksumFile –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."
        exit
    }
    $last = $lines[-4..-1]

    $expected = @{
        Dashboard  = ($last[0] -split "=")[-1].Trim()
        Timeline   = ($last[1] -split "=")[-1].Trim()
        RestoreLog = ($last[2] -split "=")[-1].Trim()
        Composite  = ($last[3] -split "=")[-1].Trim()
    }

    # –ü–æ—Ç–æ—á–Ω—ñ —Ö–µ—à—ñ (–±–µ–∑ –∑–º—ñ–Ω —Ñ–∞–π–ª—ñ–≤)
    $actual = @{
        Dashboard  = Get-FileHashHex $dashPath
        Timeline   = Get-FileHashHex $timeline
        RestoreLog = Get-FileHashHex $restPath
    }
    $compInput = "$($actual.Dashboard)$($actual.Timeline)$($actual.RestoreLog)"
    $compHash = [System.BitConverter]::ToString(
        (New-Object -TypeName System.Security.Cryptography.SHA256Managed).ComputeHash(
            [System.Text.Encoding]::UTF8.GetBytes($compInput)
        )
    ) -replace "-", ""
    $actual.Composite = $compHash

    Write-Host "`n=== Verify Checksums ==="
    $allOk = $true
    foreach ($k in 'Timeline', 'Dashboard', 'RestoreLog', 'Composite') {
        if ($expected[$k] -eq $actual[$k]) {
            Write-Host ("{0}: OK ‚úÖ" -f $k)
        }
        else {
            Write-Host ("{0}: FAIL ‚ùå (expected {1}, got {2})" -f $k, $expected[$k], $actual[$k])
            $allOk = $false
        }
    }

    if ($allOk) {
        # –í–ê–ñ–õ–ò–í–û: –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–∏—à–µ–º–æ —É RestoreLog, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ö–µ—à—ñ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ
        Write-Host "All checksums OK."
    }
    else {
        Write-Host "Some checksums FAILED."
        if ($AutoFix) {
            # 1) –õ–æ–≥ –ø—Ä–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è AutoFix (—Ü–µ –∑–º—ñ–Ω–∏—Ç—å RestoreLog)
            Add-Log $restPath "Checksums AutoFix applied (re-syncing checksums)"

            # 2) –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –•–ï–®–Ü–í –ü–Ü–°–õ–Ø –ª–æ–≥—É –≤ RestoreLog
            $newDash = Get-FileHashHex $dashPath
            $newTime = Get-FileHashHex $timeline
            $newRest = Get-FileHashHex $restPath
            $newCompInput = "$newDash$newTime$newRest"
            $newComp = [System.BitConverter]::ToString(
                (New-Object -TypeName System.Security.Cryptography.SHA256Managed).ComputeHash(
                    [System.Text.Encoding]::UTF8.GetBytes($newCompInput)
                )
            ) -replace "-", ""

            # 3) –î–æ–¥–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –±–ª–æ–∫ —É CHECKSUMS
            $entry = @"
Date: $Date
Version: AutoFix
Dashboard : SHA256=$newDash
Timeline  : SHA256=$newTime
RestoreLog: SHA256=$newRest
Composite : SHA256=$newComp
---------------------------------
"@
            Add-Content -Path $checksumFile -Value $entry
            Write-Host "AutoFix completed. Checksums re-synced."
        }
    }
    exit
}

# --- Update Status (–ª–æ–≥ –ø–æ–¥—ñ—ó —Ü–∏–∫–ª—É —É RestoreLog) ---
if ($UpdateStatus) {
    Add-Log $restPath "FOCUS cycle updated"
}

# --- Update Changelog (–ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Å) ---
if ($UpdateChangelog) {
    Add-Content -Path $changelog -Value @"
## Update ‚Äî $Date
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Dashboard/Timeline/RestoreLog
‚úçÔ∏è –°.–ß.
"@
    Write-Host "üìå CHANGELOG –æ–Ω–æ–≤–ª–µ–Ω–æ (Update)."
}

# --- New Version (–¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–µ –∞–≤—Ç–æ-—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è vX.Y) ---
if ($NewVersion) {
    # –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ SHA
    $hDash = Get-FileHashHex $dashPath
    $hTime = Get-FileHashHex $timeline
    $hRest = Get-FileHashHex $restPath
    # Composite
    $compInputV = "$hDash$hTime$hRest"
    $compHashV = [System.BitConverter]::ToString(
        (New-Object -TypeName System.Security.Cryptography.SHA256Managed).ComputeHash(
            [System.Text.Encoding]::UTF8.GetBytes($compInputV)
        )
    ) -replace "-", ""

    # –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ–≥ –≤–µ—Ä—Å—ñ—ó
    if (!(Test-Path $changelog)) {
        $ver = "v1.0"
    }
    else {
        $content = Get-Content $changelog -Raw
        $matches = [regex]::Matches($content, "v(\d+)\.(\d+)")
        if ($matches.Count -gt 0) {
            $last = $matches[$matches.Count - 1].Groups
            $major = [int]$last[1].Value
            $minor = [int]$last[2].Value + 1
            $ver = "v{0}.{1}" -f $major, $minor
        }
        else {
            $ver = "v1.0"
        }
    }

    # CHANGELOG
    Add-Content -Path $changelog -Value @"
## $ver ‚Äî $Date
- –ù–æ–≤–∞ –≤–µ—Ä—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.
- –§–∞–π–ª–∏:
  - Dashboard : SHA256=$hDash
  - Timeline  : SHA256=$hTime
  - RestoreLog: SHA256=$hRest
- Composite SHA256: $compHashV
- –°—Ç–∞—Ç—É—Å: active

‚úçÔ∏è –°.–ß.
"@

    # CHECKSUMS
    $entryV = @"
Date: $Date
Version: $ver
Dashboard : SHA256=$hDash
Timeline  : SHA256=$hTime
RestoreLog: SHA256=$hRest
Composite : SHA256=$compHashV
---------------------------------
"@
    Add-Content -Path $checksumFile -Value $entryV
    Write-Host "üìå CHANGELOG –æ–Ω–æ–≤–ª–µ–Ω–æ (New Version): $ver"
}

# --- Register Tasks (optional) ---
if ($RegisterTasks) {
    $pwsh = (Get-Command pwsh).Source
    schtasks /Create /SC DAILY /TN "CheCha-Focus-Morning" /ST 07:00 /F /TR "`"$pwsh`" -File `"$PSCommandPath`" -Root `"$Root`" -UpdateStatus"
    schtasks /Create /SC DAILY /TN "CheCha-Focus-Evening" /ST 21:00 /F /TR "`"$pwsh`" -File `"$PSCommandPath`" -Root `"$Root`" -UpdateStatus"
    Write-Host "‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á—ñ: CheCha-Focus-Morning, CheCha-Focus-Evening"
}

# --- Output ---
Write-Host ""
Write-Host "Dashboard : $dashPath"
Write-Host "RestoreLog: $restPath"
Write-Host "Timeline  : $timeline"

if ($PassThru) {
    [PSCustomObject]@{
        Dashboard  = $dashPath
        RestoreLog = $restPath
        Timeline   = $timeline
    }
}



<#
.SYNOPSIS
  –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä DAO‚Äë–º–æ–¥—É–ª—ñ–≤ —É CHECHA_CORE.
.DESCRIPTION
  –Ü–Ω—Ç–µ–≥—Ä—É—î –∞–±–æ –≤–µ—Ä–∏—Ñ—ñ–∫—É—î –ø–∞–∫–µ—Ç DAO‚Äë<Module> —É —Å—Ç—Ä—É–∫—Ç—É—Ä—É CHECHA_CORE:
    - –ü–æ—à—É–∫ ZIP (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–¥–∞–Ω–æ–≥–æ -ZipPath)
    - –†–æ–∑–ø–∞–∫–æ–≤–∫–∞ –¥–æ C12\Vault\DAO\<Module> (idempotent)
    - –û–Ω–æ–≤–ª–µ–Ω–Ω—è C12\INDEX.md (–æ–¥–∏–Ω —Ä–∞–∑)
    - –õ–æ–≥ –ø–æ–¥—ñ—ó —É C03\LOG\LOG.md
    - SHA256 —É C05\ARCHIVE\CHECKSUMS.txt (–±–µ–∑ –¥—É–±–ª—ñ–≤)

.PARAMETER Module
  –ö–æ–¥ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: G35, G37, G43). –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π.

.PARAMETER Root
  –ö–æ—Ä—ñ–Ω—å CHECHA_CORE. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: D:\CHECHA_CORE.

.PARAMETER ZipPath
  –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ ZIP. –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî —à—É–∫–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π ZIP —É <Root>\C12\Vault\DAO, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å "<Module>" —É –Ω–∞–∑–≤—ñ.

.PARAMETER VerifyOnly
  –õ–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ZIP, SHA256 —ñ –∑–∞–ø–∏—Å—É –≤ CHECKSUMS, –±–µ–∑ —Ä–æ–∑–ø–∞–∫–æ–≤–∫–∏ —Ç–∞ –∑–º—ñ–Ω.

.PARAMETER NoIndexUpdate
  –ù–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ C12\INDEX.md.

.PARAMETER NoUnpack
  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑–ø–∞–∫–æ–≤–∫—É (–∫–æ—Ä–∏—Å–Ω–æ, —è–∫—â–æ –≤–∂–µ —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ).

.EXAMPLE
  pwsh -NoProfile -File .\Integrate-DAOModule_v1.ps1 -Module G35

.EXAMPLE
  pwsh -NoProfile -File .\Integrate-DAOModule_v1.ps1 -Module G37 -VerifyOnly
#>

[CmdletBinding(SupportsShouldProcess)]
Param(
  [Parameter(Mandatory)][ValidatePattern('^G\d{2}$')][string]$Module,
  [Parameter()][string]$Root = "D:\CHECHA_CORE",
  [Parameter()][string]$ZipPath,
  [switch]$VerifyOnly,
  [switch]$NoIndexUpdate,
  [switch]$NoUnpack
)

Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

function New-DirIfMissing([string]$Path){
  if (-not (Test-Path -LiteralPath $Path)){
    New-Item -ItemType Directory -Path $Path | Out-Null
  }
}

function Add-LineOnce {
  param(
    [Parameter(Mandatory)][string]$File,
    [Parameter(Mandatory)][string]$Line
  )
  if (-not (Test-Path -LiteralPath $File)){
    New-Item -ItemType File -Path $File -Force | Out-Null
    Set-Content -LiteralPath $File -Value "" -Encoding UTF8
  }
  $content = Get-Content -LiteralPath $File -ErrorAction Stop
  if ($content -notcontains $Line){
    Add-Content -LiteralPath $File -Value $Line
  }
}

function Write-CoreLog {
  param(
    [Parameter(Mandatory)][string]$Root,
    [Parameter(Mandatory)][string]$Message
  )
  $logDir = Join-Path $Root "C03\LOG"
  $log    = Join-Path $logDir "LOG.md"
  New-DirIfMissing $logDir
  $stamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
  if (-not (Test-Path -LiteralPath $log)){
    Set-Content -LiteralPath $log -Value "# CORE LOG`r`n" -Encoding UTF8
  }
  Add-Content -LiteralPath $log -Value "$stamp [INFO] $Message"
}

function Get-LatestZipForModule {
  param(
    [Parameter(Mandatory)][string]$Dir,
    [Parameter(Mandatory)][string]$Module
  )
  if (-not (Test-Path -LiteralPath $Dir)){ return $null }
  Get-ChildItem -LiteralPath $Dir -File -Filter *.zip |
    Where-Object { $_.Name -match $Module } |
    Sort-Object LastWriteTime -Descending |
    Select-Object -First 1
}

# --- Paths
$daoDir    = Join-Path $Root "C12\Vault\DAO"
$destDir   = Join-Path $daoDir $Module
$indexFile = Join-Path $Root "C12\INDEX.md"
$archDir   = Join-Path $Root "C05\ARCHIVE"
$checks    = Join-Path $archDir "CHECKSUMS.txt"

Write-Host "üîß Integrate-DAOModule | Module = $Module"
Write-Host "üìÅ Root               | $Root"

# --- Resolve ZIP
if (-not $ZipPath){
  $latest = Get-LatestZipForModule -Dir $daoDir -Module $Module
  if (-not $latest){
    throw "ZIP –¥–ª—è –º–æ–¥—É–ª—è $Module –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É $daoDir. –í–∫–∞–∂–∏ -ZipPath –∞–±–æ –ø–æ–∫–ª–∞–¥–∏ —Ñ–∞–π–ª —É —Ü—é –ø–∞–ø–∫—É."
  }
  $ZipPath = $latest.FullName
}
if (-not (Test-Path -LiteralPath $ZipPath)){
  throw "ZIP –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $ZipPath"
}
Write-Host "üì¶ ZIP                | $ZipPath"
Write-Host "üìç Dest               | $destDir"

# --- Ensure archive dir
New-DirIfMissing $archDir

# --- Compute hash
$hash = Get-FileHash -LiteralPath $ZipPath -Algorithm SHA256
$hashLine = ("{0}  {1}" -f $hash.Hash, (Split-Path -Leaf $ZipPath))
Write-Host "üîë SHA256             | $($hash.Hash)"

if ($VerifyOnly){
  $existsChecks = (Test-Path -LiteralPath $checks) -and (Select-String -LiteralPath $checks -Pattern [Regex]::Escape($hashLine) -Quiet)
  Write-Host ("‚ÑπÔ∏è  VERIFY: –£ CHECKSUMS.txt {0}" -f ($(if($existsChecks){"–ó–ù–ê–ô–î–ï–ù–û"} else {"–ù–ï –ó–ù–ê–ô–î–ï–ù–û"})))
  Write-Host "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–µ–∑ –∑–º—ñ–Ω)."
  return
}

# --- Unpack
if (-not $NoUnpack){
  if ($PSCmdlet.ShouldProcess($destDir, "Expand-Archive (force overwrite)")){
    if (Test-Path -LiteralPath $destDir){
      Remove-Item -LiteralPath $destDir -Recurse -Force
    }
    Expand-Archive -Path $ZipPath -DestinationPath $destDir -Force
    Write-Host "‚úÖ –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ –¥–æ: $destDir"
  }
} else {
  Write-Host "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–æ–∑–ø–∞–∫–æ–≤–∫—É (-NoUnpack)."
}

# --- INDEX update (generic line; —è–∫—â–æ —î README.md ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ)
if (-not $NoIndexUpdate){
  $indexLine = "- [$Module](./DAO/$Module/README.md) ‚Äî DAO‚Äë–º–æ–¥—É–ª—å, —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —É CHECHA_CORE."
  $readme = Join-Path $destDir "README.md"
  if (Test-Path -LiteralPath $readme){
    try {
      $hdr = (Select-String -LiteralPath $readme -Pattern '^\s*#\s+(.+)$' -SimpleMatch:$false -AllMatches | Select-Object -First 1)
      if ($hdr){
        $title = ($hdr.Matches[0].Groups[1].Value).Trim()
        $indexLine = "- [$title](./DAO/$Module/README.md) ‚Äî DAO‚Äë–º–æ–¥—É–ª—å $Module."
      }
    } catch { }
  }
  Add-LineOnce -File $indexFile -Line $indexLine
  Write-Host "üß≠ INDEX –æ–Ω–æ–≤–ª–µ–Ω–æ: $indexFile"
} else {
  Write-Host "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è INDEX (-NoIndexUpdate)."
}

# --- LOG
Write-CoreLog -Root $Root -Message "–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ DAO‚Äë–º–æ–¥—É–ª—å $Module ‚Üí C12\Vault\DAO\$Module (ZIP: $(Split-Path -Leaf $ZipPath))"
Write-Host "üìù –ó–∞–ø–∏—Å —É –ª–æ–≥ –¥–æ–¥–∞–Ω–æ: C03\LOG\LOG.md"

# --- safe checksum write ---
try {
  $zipLeaf = Split-Path $ZipPath -Leaf
  $sha     = (Get-FileHash -LiteralPath $ZipPath -Algorithm SHA256).Hash
  $entry   = "$sha  $zipLeaf"
  $chkFile = Join-Path (Split-Path $ZipPath -Parent) 'CHECKSUMS.txt'
  Add-Content -LiteralPath $chkFile -Value $entry -Encoding UTF8
} catch {
  Write-Warning "Checksum write skipped: $(<#
.SYNOPSIS
  –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä DAO‚Äë–º–æ–¥—É–ª—ñ–≤ —É CHECHA_CORE.
.DESCRIPTION
  –Ü–Ω—Ç–µ–≥—Ä—É—î –∞–±–æ –≤–µ—Ä–∏—Ñ—ñ–∫—É—î –ø–∞–∫–µ—Ç DAO‚Äë<Module> —É —Å—Ç—Ä—É–∫—Ç—É—Ä—É CHECHA_CORE:
    - –ü–æ—à—É–∫ ZIP (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–¥–∞–Ω–æ–≥–æ -ZipPath)
    - –†–æ–∑–ø–∞–∫–æ–≤–∫–∞ –¥–æ C12\Vault\DAO\<Module> (idempotent)
    - –û–Ω–æ–≤–ª–µ–Ω–Ω—è C12\INDEX.md (–æ–¥–∏–Ω —Ä–∞–∑)
    - –õ–æ–≥ –ø–æ–¥—ñ—ó —É C03\LOG\LOG.md
    - SHA256 —É C05\ARCHIVE\CHECKSUMS.txt (–±–µ–∑ –¥—É–±–ª—ñ–≤)

.PARAMETER Module
  –ö–æ–¥ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: G35, G37, G43). –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π.

.PARAMETER Root
  –ö–æ—Ä—ñ–Ω—å CHECHA_CORE. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: D:\CHECHA_CORE.

.PARAMETER ZipPath
  –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ ZIP. –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî —à—É–∫–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π ZIP —É <Root>\C12\Vault\DAO, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å "<Module>" —É –Ω–∞–∑–≤—ñ.

.PARAMETER VerifyOnly
  –õ–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ZIP, SHA256 —ñ –∑–∞–ø–∏—Å—É –≤ CHECKSUMS, –±–µ–∑ —Ä–æ–∑–ø–∞–∫–æ–≤–∫–∏ —Ç–∞ –∑–º—ñ–Ω.

.PARAMETER NoIndexUpdate
  –ù–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ C12\INDEX.md.

.PARAMETER NoUnpack
  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑–ø–∞–∫–æ–≤–∫—É (–∫–æ—Ä–∏—Å–Ω–æ, —è–∫—â–æ –≤–∂–µ —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ).

.EXAMPLE
  pwsh -NoProfile -File .\Integrate-DAOModule_v1.ps1 -Module G35

.EXAMPLE
  pwsh -NoProfile -File .\Integrate-DAOModule_v1.ps1 -Module G37 -VerifyOnly
#>

[CmdletBinding(SupportsShouldProcess)]
Param(
  [Parameter(Mandatory)][ValidatePattern('^G\d{2}$')][string]$Module,
  [Parameter()][string]$Root = "D:\CHECHA_CORE",
  [Parameter()][string]$ZipPath,
  [switch]$VerifyOnly,
  [switch]$NoIndexUpdate,
  [switch]$NoUnpack
)

Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

function New-DirIfMissing([string]$Path){
  if (-not (Test-Path -LiteralPath $Path)){
    New-Item -ItemType Directory -Path $Path | Out-Null
  }
}

function Add-LineOnce {
  param(
    [Parameter(Mandatory)][string]$File,
    [Parameter(Mandatory)][string]$Line
  )
  if (-not (Test-Path -LiteralPath $File)){
    New-Item -ItemType File -Path $File -Force | Out-Null
    Set-Content -LiteralPath $File -Value "" -Encoding UTF8
  }
  $content = Get-Content -LiteralPath $File -ErrorAction Stop
  if ($content -notcontains $Line){
    Add-Content -LiteralPath $File -Value $Line
  }
}

function Write-CoreLog {
  param(
    [Parameter(Mandatory)][string]$Root,
    [Parameter(Mandatory)][string]$Message
  )
  $logDir = Join-Path $Root "C03\LOG"
  $log    = Join-Path $logDir "LOG.md"
  New-DirIfMissing $logDir
  $stamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
  if (-not (Test-Path -LiteralPath $log)){
    Set-Content -LiteralPath $log -Value "# CORE LOG`r`n" -Encoding UTF8
  }
  Add-Content -LiteralPath $log -Value "$stamp [INFO] $Message"
}

function Get-LatestZipForModule {
  param(
    [Parameter(Mandatory)][string]$Dir,
    [Parameter(Mandatory)][string]$Module
  )
  if (-not (Test-Path -LiteralPath $Dir)){ return $null }
  Get-ChildItem -LiteralPath $Dir -File -Filter *.zip |
    Where-Object { $_.Name -match $Module } |
    Sort-Object LastWriteTime -Descending |
    Select-Object -First 1
}

# --- Paths
$daoDir    = Join-Path $Root "C12\Vault\DAO"
$destDir   = Join-Path $daoDir $Module
$indexFile = Join-Path $Root "C12\INDEX.md"
$archDir   = Join-Path $Root "C05\ARCHIVE"
$checks    = Join-Path $archDir "CHECKSUMS.txt"

Write-Host "üîß Integrate-DAOModule | Module = $Module"
Write-Host "üìÅ Root               | $Root"

# --- Resolve ZIP
if (-not $ZipPath){
  $latest = Get-LatestZipForModule -Dir $daoDir -Module $Module
  if (-not $latest){
    throw "ZIP –¥–ª—è –º–æ–¥—É–ª—è $Module –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É $daoDir. –í–∫–∞–∂–∏ -ZipPath –∞–±–æ –ø–æ–∫–ª–∞–¥–∏ —Ñ–∞–π–ª —É —Ü—é –ø–∞–ø–∫—É."
  }
  $ZipPath = $latest.FullName
}
if (-not (Test-Path -LiteralPath $ZipPath)){
  throw "ZIP –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $ZipPath"
}
Write-Host "üì¶ ZIP                | $ZipPath"
Write-Host "üìç Dest               | $destDir"

# --- Ensure archive dir
New-DirIfMissing $archDir

# --- Compute hash
$hash = Get-FileHash -LiteralPath $ZipPath -Algorithm SHA256
$hashLine = ("{0}  {1}" -f $hash.Hash, (Split-Path -Leaf $ZipPath))
Write-Host "üîë SHA256             | $($hash.Hash)"

if ($VerifyOnly){
  $existsChecks = (Test-Path -LiteralPath $checks) -and (Select-String -LiteralPath $checks -Pattern [Regex]::Escape($hashLine) -Quiet)
  Write-Host ("‚ÑπÔ∏è  VERIFY: –£ CHECKSUMS.txt {0}" -f ($(if($existsChecks){"–ó–ù–ê–ô–î–ï–ù–û"} else {"–ù–ï –ó–ù–ê–ô–î–ï–ù–û"})))
  Write-Host "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–µ–∑ –∑–º—ñ–Ω)."
  return
}

# --- Unpack
if (-not $NoUnpack){
  if ($PSCmdlet.ShouldProcess($destDir, "Expand-Archive (force overwrite)")){
    if (Test-Path -LiteralPath $destDir){
      Remove-Item -LiteralPath $destDir -Recurse -Force
    }
    Expand-Archive -Path $ZipPath -DestinationPath $destDir -Force
    Write-Host "‚úÖ –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ –¥–æ: $destDir"
  }
} else {
  Write-Host "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–æ–∑–ø–∞–∫–æ–≤–∫—É (-NoUnpack)."
}

# --- INDEX update (generic line; —è–∫—â–æ —î README.md ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ)
if (-not $NoIndexUpdate){
  $indexLine = "- [$Module](./DAO/$Module/README.md) ‚Äî DAO‚Äë–º–æ–¥—É–ª—å, —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —É CHECHA_CORE."
  $readme = Join-Path $destDir "README.md"
  if (Test-Path -LiteralPath $readme){
    try {
      $hdr = (Select-String -LiteralPath $readme -Pattern '^\s*#\s+(.+)$' -SimpleMatch:$false -AllMatches | Select-Object -First 1)
      if ($hdr){
        $title = ($hdr.Matches[0].Groups[1].Value).Trim()
        $indexLine = "- [$title](./DAO/$Module/README.md) ‚Äî DAO‚Äë–º–æ–¥—É–ª—å $Module."
      }
    } catch { }
  }
  Add-LineOnce -File $indexFile -Line $indexLine
  Write-Host "üß≠ INDEX –æ–Ω–æ–≤–ª–µ–Ω–æ: $indexFile"
} else {
  Write-Host "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è INDEX (-NoIndexUpdate)."
}

# --- LOG
Write-CoreLog -Root $Root -Message "–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ DAO‚Äë–º–æ–¥—É–ª—å $Module ‚Üí C12\Vault\DAO\$Module (ZIP: $(Split-Path -Leaf $ZipPath))"
Write-Host "üìù –ó–∞–ø–∏—Å —É –ª–æ–≥ –¥–æ–¥–∞–Ω–æ: C03\LOG\LOG.md"

# --- CHECKSUMS
if (-not (Test-Path -LiteralPath $checks)){
  New-Item -ItemType File -Path $checks -Force | Out-Null
  Set-Content -LiteralPath $checks -Value "" -Encoding UTF8
}
$exists = Select-String -LiteralPath $checks -Pattern [Regex]::Escape($hashLine) -Quiet
if (-not $exists){
  Add-Content -LiteralPath $checks -Value $hashLine
}
Write-Host "üîê CHECKSUMS –æ–Ω–æ–≤–ª–µ–Ω–æ: $checks"
Write-Host "üéâ –ì–æ—Ç–æ–≤–æ."
.Exception.Message)"
}
# --- end checksum ---
# --- CHECKSUMS
if (-not (Test-Path -LiteralPath $checks)){
  New-Item -ItemType File -Path $checks -Force | Out-Null
  Set-Content -LiteralPath $checks -Value "" -Encoding UTF8
}
$exists = Select-String -LiteralPath $checks -Pattern [Regex]::Escape($hashLine) -Quiet
if (-not $exists){
  Add-Content -LiteralPath $checks -Value $hashLine
}
Write-Host "üîê CHECKSUMS –æ–Ω–æ–≤–ª–µ–Ω–æ: $checks"
Write-Host "üéâ –ì–æ—Ç–æ–≤–æ."


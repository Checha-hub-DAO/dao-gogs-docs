<#
.SYNOPSIS
  –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä DAO‚Äë–º–æ–¥—É–ª—ñ–≤ —É CHECHA_CORE (–∑ pre-flight –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ —Ä–æ—Ç–∞—Ü—ñ—î—é –ª–æ–≥—ñ–≤).
.DESCRIPTION
  –Ü–Ω—Ç–µ–≥—Ä—É—î –∞–±–æ –≤–µ—Ä–∏—Ñ—ñ–∫—É—î –ø–∞–∫–µ—Ç DAO‚Äë<Module> —É —Å—Ç—Ä—É–∫—Ç—É—Ä—É CHECHA_CORE:
    - Pre‚Äëflight –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–º—ñ—Å—Ç—É ZIP (README.md, MANIFEST.yaml, AGENTS/, DOCS/ ...)
    - –ü–æ—à—É–∫ ZIP (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–¥–∞–Ω–æ–≥–æ -ZipPath)
    - –†–æ–∑–ø–∞–∫–æ–≤–∫–∞ –¥–æ C12\Vault\DAO\<Module> (idempotent)
    - –û–Ω–æ–≤–ª–µ–Ω–Ω—è C12\INDEX.md (–æ–¥–∏–Ω —Ä–∞–∑)
    - –õ–æ–≥ –ø–æ–¥—ñ—ó —É C03\LOG\LOG.md
    - SHA256 —É C05\ARCHIVE\CHECKSUMS.txt (–±–µ–∑ –¥—É–±–ª—ñ–≤)
    - (–æ–ø—Ü—ñ–π–Ω–æ) –†–æ—Ç–∞—Ü—ñ—è –ª–æ–≥—ñ–≤ —É C03\LOG\ (verify_weekly.log/csv, LOG.md)

.PARAMETER Module
  –ö–æ–¥ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: G35, G37, G43). –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π, —Ñ–æ—Ä–º–∞—Ç ^G\d{2}$.

.PARAMETER Root
  –ö–æ—Ä—ñ–Ω—å CHECHA_CORE. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: D:\CHECHA_CORE.

.PARAMETER ZipPath
  –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ ZIP. –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî —à—É–∫–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π ZIP —É <Root>\C12\Vault\DAO, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å "<Module>" —É –Ω–∞–∑–≤—ñ.

.PARAMETER VerifyOnly
  –õ–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ZIP, SHA256 —ñ –∑–∞–ø–∏—Å—É –≤ CHECKSUMS, –±–µ–∑ —Ä–æ–∑–ø–∞–∫–æ–≤–∫–∏ —Ç–∞ –∑–º—ñ–Ω.

.PARAMETER NoIndexUpdate
  –ù–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ C12\INDEX.md.

.PARAMETER NoUnpack
  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑–ø–∞–∫–æ–≤–∫—É (–∫–æ—Ä–∏—Å–Ω–æ, —è–∫—â–æ –≤–∂–µ —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ).

.PARAMETER Strict
  –Ø–∫—â–æ pre‚Äëflight –≤–∏—è–≤–∏–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ —Ñ–∞–π–ª–∏/–∫–∞—Ç–∞–ª–æ–≥–∏ ‚Äî –∫–∏–¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É (—ñ –∑—É–ø–∏–Ω—è—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é).

.PARAMETER RequiredPaths
  –ö–∞—Å—Ç–æ–º–Ω–∏–π —Å–ø–∏—Å–æ–∫ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏—Ö —à–ª—è—Ö—ñ–≤ —É ZIP (—Ä—è–¥–∫–∏ —É —Å—Ç–∏–ª—ñ "README.md", "AGENTS/", "DOCS/"). –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –Ω–∞–±—ñ—Ä.

.PARAMETER RotateLogs
  –ü—ñ—Å–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä–æ—Å—Ç—É —Ä–æ—Ç–∞—Ü—ñ—é –ª–æ–≥—ñ–≤ —É C03\LOG\ (verify_weekly.log, verify_weekly.csv, LOG.md).
#>

[CmdletBinding(SupportsShouldProcess)]
param(
    [Parameter(Mandatory)][ValidatePattern('^G\d{2}$')][string]$Module,
    [Parameter()][string]$Root = "D:\CHECHA_CORE",
    [Parameter()][string]$ZipPath,
    [switch]$VerifyOnly,
    [switch]$NoIndexUpdate,
    [switch]$NoUnpack,
    [switch]$Strict,
    [string[]]$RequiredPaths,
    [switch]$RotateLogs
)

Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

Add-Type -AssemblyName System.IO.Compression.FileSystem | Out-Null

function New-DirIfMissing([string]$Path) {
    if (-not (Test-Path -LiteralPath $Path)) {
        New-Item -ItemType Directory -Path $Path | Out-Null
    }
}

function Add-LineOnce {
    param(
        [Parameter(Mandatory)][string]$File,
        [Parameter(Mandatory)][string]$Line
    )
    if (-not (Test-Path -LiteralPath $File)) {
        New-Item -ItemType File -Path $File -Force | Out-Null
        Set-Content -LiteralPath $File -Value "" -Encoding UTF8
    }
    $content = Get-Content -LiteralPath $File -ErrorAction Stop
    if ($content -notcontains $Line) {
        Add-Content -LiteralPath $File -Value $Line
    }
}

function Write-CoreLog {
    param(
        [Parameter(Mandatory)][string]$Root,
        [Parameter(Mandatory)][string]$Message
    )
    $logDir = Join-Path $Root "C03\LOG"
    $log = Join-Path $logDir "LOG.md"
    New-DirIfMissing $logDir
    if (-not (Test-Path -LiteralPath $log)) {
        Set-Content -LiteralPath $log -Value "# CORE LOG`r`n" -Encoding UTF8
    }
    $stamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    Add-Content -LiteralPath $log -Value "$stamp [INFO] $Message"
}

function Get-LatestZipForModule {
    param(
        [Parameter(Mandatory)][string]$Dir,
        [Parameter(Mandatory)][string]$Module
    )
    if (-not (Test-Path -LiteralPath $Dir)) { return $null }
    Get-ChildItem -LiteralPath $Dir -File -Filter *.zip |
        Where-Object { $_.Name -match $Module } |
        Sort-Object LastWriteTime -Descending |
        Select-Object -First 1
}

function Test-ZipPreflight {
    param(
        [Parameter(Mandatory)][string]$ZipPath,
        [Parameter(Mandatory)][string[]]$Required
    )
    $zip = [System.IO.Compression.ZipFile]::OpenRead($ZipPath)
    try {
        $names = @($zip.Entries | ForEach-Object { $_.FullName })
    }
    finally {
        $zip.Dispose()
    }
    $missing = @()
    foreach ($req in $Required) {
        if ($req.EndsWith("/")) {
            # –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: —à—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫–∏–π –∑–∞–ø–∏—Å, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–∞
            $exists = $names | Where-Object { $_ -like "$req*" } | Select-Object -First 1
            if (-not $exists) { $missing += $req }
        }
        else {
            # —Ñ–∞–π–ª: —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ –∫–æ—Ä–µ–Ω—ñ
            $exists = $names -contains $req
            if (-not $exists) { $missing += $req }
        }
    }
    [pscustomobject]@{
        ZipPath  = $ZipPath
        Required = $Required
        Missing  = $missing
        Ok       = ($missing.Count -eq 0)
    }
}

function Rotate-File {
    param(
        [Parameter(Mandatory)][string]$Path,
        [Parameter(Mandatory)][long]$MaxBytes,
        [int]$Keep = 3
    )
    if (-not (Test-Path -LiteralPath $Path)) { return $false }
    $fi = Get-Item -LiteralPath $Path -ErrorAction SilentlyContinue
    if (-not $fi) { return $false }
    if ($fi.Length -lt $MaxBytes) { return $false }
    $dir = Split-Path -Parent $Path
    $name = Split-Path -Leaf $Path
    $stamp = (Get-Date).ToString("yyyyMMdd_HHmmss")
    $ext = [IO.Path]::GetExtension($name)
    $base = [IO.Path]::GetFileNameWithoutExtension($name)
    $rot = Join-Path $dir ("{0}.{1}{2}" -f $base, $stamp, $ext)
    Move-Item -LiteralPath $Path -Destination $rot -Force
    # —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π –Ω–æ–≤–∏–π —Ñ–∞–π–ª –∑ —Ç–∏–º —Å–∞–º–∏–º —ñ–º'—è–º
    Set-Content -LiteralPath $Path -Value "" -Encoding UTF8

    # —á–∏—Å—Ç–∏–º–æ —Å—Ç–∞—Ä—ñ
    $pattern = Join-Path $dir ("{0}.*{1}" -f $base, $ext)
    $old = Get-ChildItem -LiteralPath $dir -Filter ("{0}.*{1}" -f $base, $ext) | Sort-Object LastWriteTime -Descending
    $i = 0
    foreach ($f in $old) {
        $i++
        if ($i -le $Keep) { continue }
        Remove-Item -LiteralPath $f.FullName -Force -ErrorAction SilentlyContinue
    }
    return $true
}

# --- Paths
$daoDir = Join-Path $Root "C12\Vault\DAO"
$destDir = Join-Path $daoDir $Module
$indexFile = Join-Path $Root "C12\INDEX.md"
$archDir = Join-Path $Root "C05\ARCHIVE"
$checks = Join-Path $archDir "CHECKSUMS.txt"
$logDir = Join-Path $Root "C03\LOG"

Write-Host "üîß Integrate-DAOModule v2 | Module = $Module"
Write-Host "üìÅ Root                  | $Root"

# --- Resolve ZIP
if (-not $ZipPath) {
    $latest = Get-LatestZipForModule -Dir $daoDir -Module $Module
    if (-not $latest) {
        throw "ZIP –¥–ª—è –º–æ–¥—É–ª—è $Module –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É $daoDir. –í–∫–∞–∂–∏ -ZipPath –∞–±–æ –ø–æ–∫–ª–∞–¥–∏ —Ñ–∞–π–ª —É —Ü—é –ø–∞–ø–∫—É."
    }
    $ZipPath = $latest.FullName
}
if (-not (Test-Path -LiteralPath $ZipPath)) {
    throw "ZIP –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $ZipPath"
}
Write-Host "üì¶ ZIP                   | $ZipPath"
Write-Host "üìç Dest                  | $destDir"

# --- Ensure dirs
New-DirIfMissing $archDir
New-DirIfMissing $logDir

# --- Pre-flight
if (-not $RequiredPaths -or $RequiredPaths.Count -eq 0) {
    $RequiredPaths = @(
        "README.md",
        "MANIFEST.yaml",
        "AGENTS/",
        "DOCS/"
    )
}
$pf = Test-ZipPreflight -ZipPath $ZipPath -Required $RequiredPaths
if ($pf.Ok) {
    Write-Host "‚úÖ Pre‚Äëflight: —É—Å—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ."
}
else {
    Write-Warning ("Pre‚Äëflight: –≤—ñ–¥—Å—É—Ç–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ ‚Üí {0}" -f ($pf.Missing -join ", "))
    Write-CoreLog -Root $Root -Message ("[WARN] Pre‚Äëflight $Module: –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚Üí {0}" -f ($pf.Missing -join ", "))
    if ($Strict) {
        throw ("Pre‚Äëflight (Strict): –∑—É–ø–∏–Ω–µ–Ω–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ ‚Üí {0}" -f ($pf.Missing -join ", "))
    }
}

# --- Compute hash
$hash = Get-FileHash -LiteralPath $ZipPath -Algorithm SHA256
$hashLine = ("{0}  {1}" -f $hash.Hash, (Split-Path -Leaf $ZipPath))
Write-Host "üîë SHA256                | $($hash.Hash)"

if ($VerifyOnly) {
    $existsChecks = (Test-Path -LiteralPath $checks) -and (Select-String -LiteralPath $checks -Pattern [Regex]::Escape($hashLine) -Quiet)
    Write-Host ("‚ÑπÔ∏è  VERIFY: –£ CHECKSUMS.txt {0}" -f ($(if ($existsChecks) { "–ó–ù–ê–ô–î–ï–ù–û" } else { "–ù–ï –ó–ù–ê–ô–î–ï–ù–û" })))
    Write-Host "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–µ–∑ –∑–º—ñ–Ω)."
    return
}

# --- Unpack
if (-not $NoUnpack) {
    if ($PSCmdlet.ShouldProcess($destDir, "Expand-Archive (force overwrite)")) {
        if (Test-Path -LiteralPath $destDir) {
            Remove-Item -LiteralPath $destDir -Recurse -Force
        }
        Expand-Archive -Path $ZipPath -DestinationPath $destDir -Force
        Write-Host "‚úÖ –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ –¥–æ: $destDir"
    }
}
else {
    Write-Host "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–æ–∑–ø–∞–∫–æ–≤–∫—É (-NoUnpack)."
}

# --- INDEX update (generic line; —è–∫—â–æ —î README.md ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
if (-not $NoIndexUpdate) {
    $indexLine = "- [$Module](./DAO/$Module/README.md) ‚Äî DAO‚Äë–º–æ–¥—É–ª—å, —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —É CHECHA_CORE."
    $readme = Join-Path $destDir "README.md"
    if (Test-Path -LiteralPath $readme) {
        try {
            $hdr = (Select-String -LiteralPath $readme -Pattern '^\s*#\s+(.+)$' -AllMatches | Select-Object -First 1)
            if ($hdr) {
                $title = ($hdr.Matches[0].Groups[1].Value).Trim()
                $indexLine = "- [$title](./DAO/$Module/README.md) ‚Äî DAO‚Äë–º–æ–¥—É–ª—å $Module."
            }
        }
        catch { }
    }
    Add-LineOnce -File $indexFile -Line $indexLine
    Write-Host "üß≠ INDEX –æ–Ω–æ–≤–ª–µ–Ω–æ: $indexFile"
}
else {
    Write-Host "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è INDEX (-NoIndexUpdate)."
}

# --- LOG
Write-CoreLog -Root $Root -Message "–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ DAO‚Äë–º–æ–¥—É–ª—å $Module ‚Üí C12\Vault\DAO\$Module (ZIP: $(Split-Path -Leaf $ZipPath))"
Write-Host "üìù –ó–∞–ø–∏—Å —É –ª–æ–≥ –¥–æ–¥–∞–Ω–æ: C03\LOG\LOG.md"

# --- CHECKSUMS
if (-not (Test-Path -LiteralPath $checks)) {
    New-Item -ItemType File -Path $checks -Force | Out-Null
    Set-Content -LiteralPath $checks -Value "" -Encoding UTF8
}
$exists = Select-String -LiteralPath $checks -Pattern [Regex]::Escape($hashLine) -Quiet
if (-not $exists) {
    Add-Content -LiteralPath $checks -Value $hashLine
}
Write-Host "üîê CHECKSUMS –æ–Ω–æ–≤–ª–µ–Ω–æ: $checks"

# --- Rotate logs (optional)
if ($RotateLogs) {
    $rot1 = Rotate-File -Path (Join-Path $logDir "verify_weekly.log") -MaxBytes (5MB) -Keep 5
    $rot2 = Rotate-File -Path (Join-Path $logDir "verify_weekly.csv") -MaxBytes (10MB) -Keep 5
    $rot3 = Rotate-File -Path (Join-Path $logDir "LOG.md") -MaxBytes (2MB) -Keep 5
    Write-Host ("‚ôªÔ∏è  –†–æ—Ç–∞—Ü—ñ—è –ª–æ–≥—ñ–≤: weekly.log={0}, weekly.csv={1}, LOG.md={2}" -f $rot1, $rot2, $rot3)
}

Write-Host "üéâ –ì–æ—Ç–æ–≤–æ."



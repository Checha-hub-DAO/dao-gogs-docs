<#!
.SYNOPSIS
  Реєстрація єдиної задачі Scheduler, що запускає чистку (Cleanup-C11-Tools_v2.ps1) і потім health‑чек (Check-C11-ToolsHealth.ps1).
.DESCRIPTION
  Скрипт створює допоміжний «wrapper» Run-CleanupSuite.ps1 у C11\tools і реєструє задачу
  \Checha\CleanupSuite-Weekly на вказаний час (типово: НД 21:10 Europe/Kyiv).
  Wrapper послідовно викликає:
    1) Cleanup-C11-Tools_v2.ps1  (з опціями рекомендується без -NormalizeNames на перших прогонах)
    2) Check-C11-ToolsHealth.ps1
  Увесь вивід логів пишеться у C03\LOG\cleanup_tools.log та C03\LOG\cleanup_health.log.
.PARAMETER Root
  Корінь CHECHA_CORE. Типово: D:\\CHECHA_CORE
.PARAMETER Day
  День тижня (MON,TUE,WED,THU,FRI,SAT,SUN). Типово: SUN
.PARAMETER Hour
  Година (24h). Типово: 21
.PARAMETER Minute
  Хвилина. Типово: 10
.PARAMETER NormalizeNames
  Додати -NormalizeNames до виклику cleanup v2 (обережно: перейменування «основних» файлів).
.PARAMETER VerifyArchives
  Додати -VerifyArchives до cleanup v2 (повна перевірка попередніх архівів SHA256).
.EXAMPLE
  pwsh -NoProfile -File .\Register-CleanupSuite.ps1 -Root 'D:\\CHECHA_CORE'
.EXAMPLE
  pwsh -NoProfile -File .\Register-CleanupSuite.ps1 -Root 'D:\\CHECHA_CORE' -Day SUN -Hour 21 -Minute 30 -VerifyArchives
#>
[CmdletBinding()]
param(
    [string]$Root = 'D:\\CHECHA_CORE',
    [ValidateSet('MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN')]
    [string]$Day = 'SUN',
    [int]$Hour = 21,
    [int]$Minute = 10,
    [switch]$NormalizeNames,
    [switch]$VerifyArchives
)

$ErrorActionPreference = 'Stop'

# Шляхи
$toolsDir = Join-Path $Root 'C11\\tools'
$logDir = Join-Path $Root 'C03\\LOG'
$cleanupV2 = Join-Path $toolsDir 'Cleanup-C11-Tools_v2.ps1'
$health = Join-Path $toolsDir 'Check-C11-ToolsHealth.ps1'
$wrapper = Join-Path $toolsDir 'Run-CleanupSuite.ps1'
$pwsh = 'C:\\Program Files\\PowerShell\\7\\pwsh.exe'
$taskName = '\\Checha\\CleanupSuite-Weekly'

# Перевірки
foreach ($p in @($toolsDir, $logDir)) { if (-not (Test-Path $p)) { New-Item -ItemType Directory -Path $p | Out-Null } }
if (-not (Test-Path $cleanupV2)) { throw "Не знайдено cleanup v2: $cleanupV2" }
if (-not (Test-Path $health)) { throw "Не знайдено health-checker: $health" }
if (-not (Test-Path $pwsh)) { throw "Не знайдено PowerShell 7: $pwsh" }

# Формуємо аргументи для виклику cleanup v2
$cleanupArgs = @('-NoProfile', '-ExecutionPolicy', 'Bypass', '-File', "`"$cleanupV2`"", '-Root', "`"$Root`"")
if ($NormalizeNames) { $cleanupArgs += '-NormalizeNames'; $cleanupArgs += '-Confirm:$false' }
if ($VerifyArchives) { $cleanupArgs += '-VerifyArchives' }
$cleanupCmd = "$pwsh " + ($cleanupArgs -join ' ')

# Health виклик
$healthArgs = @('-NoProfile', '-ExecutionPolicy', 'Bypass', '-File', "`"$health`"", '-Root', "`"$Root`"")
$healthCmd = "$pwsh " + ($healthArgs -join ' ')

# Тіло wrapper-скрипта
$wrapperBody = @"
# Auto-generated by Register-CleanupSuite.ps1
# Послідовний запуск: Cleanup v2 -> Health

\$ErrorActionPreference = 'Stop'

Write-Host "[CleanupSuite] START: \$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
try {
  Write-Host "[CleanupSuite] Run CLEANUP v2"
  & $pwsh -NoProfile -ExecutionPolicy Bypass -File "$cleanupV2" -Root "$Root" @(
    $(if($NormalizeNames){"-NormalizeNames"})
  ) @(
    $(if($VerifyArchives){"-VerifyArchives"})
  )
} catch {
  Write-Host "[CleanupSuite] CLEANUP ERROR: \$($_.Exception.Message)" -ForegroundColor Red
}

try {
  Write-Host "[CleanupSuite] Run HEALTH"
  & $pwsh -NoProfile -ExecutionPolicy Bypass -File "$health" -Root "$Root"
} catch {
  Write-Host "[CleanupSuite] HEALTH ERROR: \$($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "[CleanupSuite] DONE: \$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
"@

# Записуємо wrapper
Set-Content -Path $wrapper -Value $wrapperBody -Encoding UTF8

# Підготовка рядка запуску для Scheduler
$taskArgs = "-NoProfile -ExecutionPolicy Bypass -File `"$wrapper`""

# Перереєстрація задачі
try { schtasks /Delete /TN $taskName /F | Out-Null } catch {}

$time = "{0:D2}:{1:D2}" -f $Hour, $Minute
$create = @('/Create', '/SC', 'WEEKLY', '/D', $Day, '/TN', $taskName, '/TR', '"' + $pwsh + ' ' + $taskArgs + '"', '/ST', $time, '/RL', 'LIMITED', '/F')

$s = Start-Process -FilePath schtasks.exe -ArgumentList $create -Wait -PassThru
if ($s.ExitCode -ne 0) { throw "Помилка створення задачі, exit=$($s.ExitCode)" }

Write-Host "✅ Зареєстровано: $taskName ($Day $time)" -ForegroundColor Green
schtasks /Query /TN $taskName /V /FO LIST | Out-Host



<# 
.SYNOPSIS
  Release finalize for G46.1 ‚Äî Podilsk.InfoHub (v1.2 plan)

.DESCRIPTION
  - Ensures repo state, optional ZIP import, CHANGELOG date bump,
    git add/commit, and optional tag creation.

.EXAMPLE
  pwsh -NoProfile -ExecutionPolicy Bypass -File `
    .\Release-Finalize_PodilskInfoHub_v1.2.ps1 `
    -RepoRoot 'D:\CHECHA_CORE\DAO-GOGS-MAIN' `
    -ModuleRel 'modules\g46-1-podilsk-infohub' `
    -ZipPath 'C:\Users\serge\Downloads\Podilsk_InfoHub_v1.2.zip' `
    -Version 'v1.2' -DoTag -Verbose

#>

[CmdletBinding()]
param(
  # –ö–æ—Ä—ñ–Ω—å git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é (–º–æ–Ω–æ—Ä–µ–ø–æ)
  [Parameter(Mandatory=$true)]
  [string]$RepoRoot,

  # –í—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—è —É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'modules\g46-1-podilsk-infohub')
  [Parameter(Mandatory=$true)]
  [string]$ModuleRel,

  # –í–µ—Ä—Å—ñ—è —Ä–µ–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'v1.2')
  [Parameter(Mandatory=$true)]
  [ValidatePattern('^v\d+(\.\d+)*$')]
  [string]$Version,

  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: ZIP –∑ –≥–æ—Ç–æ–≤–∏–º–∏ README.md + CHANGELOG.md
  [Parameter(Mandatory=$false)]
  [string]$ZipPath,

  # –°—Ç–≤–æ—Ä–∏—Ç–∏ git-—Ç–µ–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'G46.1-v1.2-plan')
  [switch]$DoTag,

  # –°—É—Ö–∏–π –ø—Ä–æ–≥—ñ–Ω –±–µ–∑ –∑–º—ñ–Ω
  [switch]$DryRun
)

function Write-Step($msg){ Write-Host "üîß $msg" -ForegroundColor Cyan }
function Write-Ok($msg){ Write-Host "‚úÖ $msg" -ForegroundColor Green }
function Write-Warn($msg){ Write-Host "‚ö†Ô∏è  $msg" -ForegroundColor Yellow }
function Write-Err($msg){ Write-Host "‚ùå $msg" -ForegroundColor Red }

# 0) Normalize & checks
$ErrorActionPreference = 'Stop'
$repo = (Resolve-Path $RepoRoot).Path
$modulePath = Join-Path $repo $ModuleRel
$today = (Get-Date).ToString('yyyy-MM-dd')
$tagName = "G46.1-$Version-plan"

Write-Step "RepoRoot: $repo"
Write-Step "Module : $modulePath"
Write-Step "Version: $Version"

if (-not (Test-Path $repo)) { throw "RepoRoot –Ω–µ —ñ—Å–Ω—É—î: $repo" }
if (-not (Get-Command git -ErrorAction SilentlyContinue)) { throw "Git –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É PATH" }

# 1) Git sanity
Write-Step "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ git-—Å—Ç–∞–Ω—É‚Ä¶"
git -C $repo rev-parse --is-inside-work-tree | Out-Null
$branch = (git -C $repo rev-parse --abbrev-ref HEAD).Trim()
Write-Step "–ì—ñ–ª–∫–∞: $branch"

# 2) Ensure module dir
if (-not (Test-Path $modulePath)) {
  Write-Warn "–ö–∞—Ç–∞–ª–æ–≥ –º–æ–¥—É–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä—é—é: $modulePath"
  if (-not $DryRun) { New-Item -ItemType Directory -Force -Path $modulePath | Out-Null }
}

# 3) Optional ZIP import
if ($ZipPath) {
  if (-not (Test-Path $ZipPath)) { throw "ZIP –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $ZipPath" }
  Write-Step "–†–æ–∑–ø–∞–∫–æ–≤—É—é ZIP ‚Üí $modulePath"
  if (-not $DryRun) {
    Add-Type -AssemblyName System.IO.Compression.FileSystem
    [System.IO.Compression.ZipFile]::ExtractToDirectory($ZipPath, $modulePath, $true)
  }
  Write-Ok "ZIP —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ"
} else {
  Write-Warn "ZipPath –Ω–µ –∑–∞–¥–∞–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —ñ–º–ø–æ—Ä—Ç —Ñ–∞–π–ª—ñ–≤."
}

# 4) Ensure baseline files exist
$readme = Join-Path $modulePath 'README.md'
$changelog = Join-Path $modulePath 'CHANGELOG.md'

if (-not (Test-Path $readme)) {
  Write-Warn "README.md –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä—é—é –∑–∞–≥–ª—É—à–∫—É."
  if (-not $DryRun) { Set-Content -Path $readme -Encoding UTF8 -Value "# G46.1 ‚Äî Podilsk.InfoHub`n**–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —â–∏—Ç –ü–æ–¥—ñ–ª–ª—è**`n" }
}
if (-not (Test-Path $changelog)) {
  Write-Warn "CHANGELOG.md –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä—é—é –∑–∞–≥–ª—É—à–∫—É."
  if (-not $DryRun) { Set-Content -Path $changelog -Encoding UTF8 -Value "# CHANGELOG ‚Äî G46.1 Podilsk.InfoHub`n" }
}

# 5) Bump planned date in CHANGELOG (replace '–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ' ‚Üí $today for v1.2)
Write-Step "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –≤ CHANGELOG (—è–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å '–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ')‚Ä¶"
if (Test-Path $changelog) {
  $content = Get-Content $changelog -Raw -Encoding UTF8
  $pattern = '(?im)^(##\s*\[v1\.2\]\s*‚Äî\s*)(–ø–ª–∞–Ω|–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ)\s*$'
  if ($content -match $pattern) {
    $new = [System.Text.RegularExpressions.Regex]::Replace($content, $pattern, "`$1$today")
    if (-not $DryRun) { Set-Content -Path $changelog -Encoding UTF8 -Value $new }
    Write-Ok "–ó–∞–º—ñ–Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞: '–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ' ‚Üí $today"
  } else {
    Write-Warn "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü—ñ—ó 'v1.2 ‚Äî –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ' ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é."
  }
}

# 6) Git add/commit
Write-Step "Git add‚Ä¶"
if (-not $DryRun) {
  git -C $repo add -- "$ModuleRel/README.md" "$ModuleRel/CHANGELOG.md"
}

$commitMsg = @"
G46.1 Podilsk.InfoHub $Version plan ‚Äî finalize README + CHANGELOG

- Ensure module structure and assets
- Update CHANGELOG ($Version) planned date ‚Üí $today
- Ready for GitBook page and MediaKit bootstrap
"@

Write-Step "Git commit‚Ä¶"
if (-not $DryRun) {
  git -C $repo commit -m $commitMsg
  Write-Ok "–ö–æ–º—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ."
} else {
  Write-Warn "DryRun: –∫–æ–º—ñ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ."
}

# 7) Optional tag
if ($DoTag) {
  Write-Step "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–≥–∞: $tagName"
  if (-not $DryRun) {
    git -C $repo tag -a $tagName -m "$tagName ‚Äî $today"
    Write-Ok "–¢–µ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–æ."
  } else {
    Write-Warn "DryRun: —Ç–µ–≥ –ø—Ä–æ–ø—É—â–µ–Ω–æ."
  }
}

Write-Ok "Release finalize –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
Write-Host "üëâ –î–∞–ª—ñ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è): git -C `"$repo`" push && git -C `"$repo`" push --tags" -ForegroundColor Magenta

<#
.SYNOPSIS
  –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è SHA256 —ñ —Å—Ç–∞—Ç—É—Å—ñ–≤ —É MANIFEST.md (BTD 1.0) + –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è CHECKSUMS.txt —Ç–∞ JSON-–º–∞–Ω—ñ—Ñ–µ—Å—Ç—É.

.DESCRIPTION
  - –ó–Ω–∞—Ö–æ–¥–∏—Ç—å markdown-—Ç–∞–±–ª–∏—Ü—é –º—ñ–∂ —Ä–æ–∑–¥—ñ–ª–æ–º "–°–∫–ª–∞–¥–æ–≤—ñ (–∫–ª—é—á–æ–≤—ñ —Ñ–∞–π–ª–∏)" —ñ "–ü—Ä–∏–º—ñ—Ç–∫–∏" (–∞–±–æ –∫—ñ–Ω—Ü–µ–º —Ñ–∞–π–ª—É).
  - –ü–∞—Ä—Å–∏—Ç—å —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ (pipe-separated), –≤–∏—Ä–∞—Ö–æ–≤—É—î SHA256 –¥–ª—è –Ω–∞—è–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.
  - –û–Ω–æ–≤–ª—é—î –∫–æ–ª–æ–Ω–∫—É SHA256; –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –∫–æ—Ä–∏–≥—É—î Status:
      * —è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î ‚Äî –Ω–µ —á—ñ–ø–∞—î —Å—Ç–∞—Ç—É—Å, –æ–∫—Ä—ñ–º –≤–∏–ø–∞–¥–∫—É "Error" ‚Üí —Å—Ç–∞–≤–∏—Ç—å "OK"
      * —è–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–∞–≤–∏—Ç—å "Error"
  - –ü–∏—à–µ –Ω–∞–∑–∞–¥ —É MANIFEST.md (UTF-8), —Å—Ç–≤–æ—Ä—é—î C11\CHECKSUMS.txt —ñ C11\BTD_Manifest.json

.EXAMPLE
  pwsh -NoProfile -ExecutionPolicy Bypass -File "D:\CHECHA_CORE\TOOLS\Build-BTD-Manifest.ps1"

.PARAMETER ManifestPath
  –®–ª—è—Ö –¥–æ MANIFEST.md (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º D:\CHECHA_CORE\C11\MANIFEST.md)

.PARAMETER RepoRoot
  –ö–æ—Ä—ñ–Ω—å –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º D:\CHECHA_CORE)

.PARAMETER OutDir
  –ö—É–¥–∏ –∫–ª–∞—Å—Ç–∏ CHECKSUMS.txt —Ç–∞ JSON (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º D:\CHECHA_CORE\C11)

.NOTES
  –ê–≤—Ç–æ—Ä: –°.–ß. / –ß–µ–ß–∞-—Å–∏—Å—Ç–µ–º–∞
#>

[CmdletBinding()]
param(
    [string]$ManifestPath = 'D:\CHECHA_CORE\C11\MANIFEST.md',
    [string]$RepoRoot = 'D:\CHECHA_CORE',
    [string]$OutDir = 'D:\CHECHA_CORE\C11'
)

function Join-RepoPath {
    param([string]$RelPath)
    if (-not $RelPath) { return $null }
    # –£ –º–∞–Ω—ñ—Ñ–µ—Å—Ç—ñ —à–ª—è—Ö–∏ –≤ —Å—Ç–∏–ª—ñ "C11/tools/INDEX/TOOLS_INDEX.md"
    $p = $RelPath -replace '[\\/]+', '\'            # –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Å–ª–µ—à—ñ
    $p = $p.TrimStart('\')                         # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ª—ñ–¥–∏–Ω–≥
    return (Join-Path -Path $RepoRoot -ChildPath $p)
}

function Compute-Sha256 {
    param([string]$FullPath)
    try {
        if (Test-Path -LiteralPath $FullPath -PathType Leaf) {
            return (Get-FileHash -Algorithm SHA256 -LiteralPath $FullPath).Hash
        }
        return $null
    }
    catch {
        return $null
    }
}

# --- —á–∏—Ç–∞–Ω–Ω—è MANIFEST.md ---
if (-not (Test-Path -LiteralPath $ManifestPath)) {
    throw "MANIFEST.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $ManifestPath"
}
$md = Get-Content -LiteralPath $ManifestPath -Raw

# –º–µ–∂—ñ —Ç–∞–±–ª–∏—Ü—ñ
$startMarker = '## üîπ –°–∫–ª–∞–¥–æ–≤—ñ (–∫–ª—é—á–æ–≤—ñ —Ñ–∞–π–ª–∏)'
$endMarker = '## üîπ –ü—Ä–∏–º—ñ—Ç–∫–∏'

$startIdx = $md.IndexOf($startMarker)
if ($startIdx -lt 0) { throw "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü—ñ—é: $startMarker" }

# –≤–∏—Ä—ñ–∑–∞—î–º–æ —á–∞—Å—Ç–∏–Ω—É –∑ —Ç–∞–±–ª–∏—Ü–µ—é
$afterStart = $md.Substring($startIdx)
$endIdxRel = $afterStart.IndexOf($endMarker)
if ($endIdxRel -lt 0) {
    # —Ç–∞–±–ª–∏—Ü—è –¥–æ –∫—ñ–Ω—Ü—è —Ñ–∞–π–ª—É
    $tableBlock = $afterStart
    $restTail = ''
}
else {
    $tableBlock = $afterStart.Substring(0, $endIdxRel)
    $restTail = $afterStart.Substring($endIdxRel)  # –≤–∫–ª—é—á–Ω–æ –∑ –º–∞—Ä–∫–µ—Ä–æ–º –ü—Ä–∏–º—ñ—Ç–æ–∫
}

# –∑–Ω–∞–π—Ç–∏ —Å–∞–º—É —Ç–∞–±–ª–∏—Ü—é (—Ä—è–¥–∫–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ '|')
$lines = ($tableBlock -split "`r?`n")
$tableStart = ($lines | Select-String -SimpleMatch '|' | Select-Object -First 1).LineNumber
if (-not $tableStart) { throw "–¢–∞–±–ª–∏—Ü—è –∑—ñ '|' —É —Å–µ–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞." }

# –∑–±–µ—Ä–µ–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á + —Ç—ñ–ª–æ
$header = $lines[$tableStart - 1]
$separator = $lines[$tableStart]
$bodyLines = @()
for ($i = $tableStart + 1; $i -lt $lines.Count; $i++) {
    $line = $lines[$i]
    if (-not ($line -match '^\s*\|')) { break }
    if ($line.Trim() -eq '') { break }
    $bodyLines += $line
}

# –ø–∞—Ä—Å–∏–º–æ —Ä—è–¥–∫–∏ —Ç—ñ–ª–∞
$updatedBody = New-Object System.Collections.Generic.List[string]
$recordsJson = New-Object System.Collections.Generic.List[object]
$checksums = New-Object System.Collections.Generic.List[string]

foreach ($row in $bodyLines) {
    # —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ '|' —ñ —Ç—Ä–∏–º–∞—î–º–æ 6 –∫–æ–ª–æ–Ω–æ–∫: | –ö–æ–¥ | –ù–∞–∑–≤–∞ | –®–ª—è—Ö | SHA256 | –°—Ç–∞—Ç—É—Å |
    $cells = ($row -split '\|') | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' }
    # —ñ–Ω–æ–¥—ñ –ø–µ—Ä—à–∏–π/–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π —á–µ—Ä–µ–∑ –∫—Ä–∞–π–Ω—ñ |
    # –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤—ñ–∑—å–º–µ–º–æ 5 –ø–µ—Ä—à–∏—Ö –∑–Ω–∞—á—É—â–∏—Ö –ø–æ–ª—ñ–≤
    if ($cells.Count -lt 5) {
        $updatedBody.Add($row) | Out-Null
        continue
    }
    $Code = $cells[0]
    $Name = $cells[1]
    $Rel = $cells[2]
    $Sha = $cells[3]
    $Status = $cells[4]

    $full = Join-RepoPath -RelPath $Rel
    $newSha = if ($full) { Compute-Sha256 -FullPath $full } else { $null }

    if ($newSha) {
        # —Ñ–∞–π–ª —ñ—Å–Ω—É—î ‚Äî –æ–Ω–æ–≤–∏–º–æ SHA; —è–∫—â–æ —Å—Ç–∞—Ç—É—Å –±—É–≤ Error ‚Äî –ø—ñ–¥–Ω—ñ–º–µ–º–æ –¥–æ OK
        $Sha = $newSha
        if ($Status -match 'Error') { $Status = 'OK' }
    }
    else {
        # —Ñ–∞–π–ª–∞ –Ω–µ–º–∞—î ‚Äî –≤—ñ–¥–∑–Ω–∞—á–∏–º–æ –ø–æ–º–∏–ª–∫—É
        $Sha = '‚Äî'
        $Status = 'Error'
    }

    # —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É—é—î–º–æ —Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
    $newRow = "| $Code | $Name | $Rel | `$Sha$($null) | $Status |"
    # –∞–ª–µ `$Sha$($null)` –≤–∏–≥–ª—è–¥–∞—î –¥–∏–≤–Ω–æ ‚Äî —Å—Ñ–æ—Ä–º—É—î–º–æ –∞–∫—É—Ä–∞—Ç–Ω–æ:
    $newRow = "| $Code | $Name | $Rel | $Sha | $Status |"
    $updatedBody.Add($newRow) | Out-Null

    # –∫–æ–ª–µ–∫—Ü—ñ—ó –≤–∏—Ö—ñ–¥–Ω–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤
    if ($newSha) {
        $checksums.Add("{0}  {1}" -f $newSha, $Rel) | Out-Null
    }
    else {
        $checksums.Add("MISSING  {0}" -f $Rel) | Out-Null
    }

    $recordsJson.Add([pscustomobject]@{
            code   = $Code
            name   = $Name
            path   = $Rel
            full   = $full
            sha256 = if ($newSha) { $newSha } else { $null }
            status = $Status
        }) | Out-Null
}

# –∑–±–∏—Ä–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –±–ª–æ–∫—É —Å–µ–∫—Ü—ñ—ó
$rebuiltTable = @()
$rebuiltTable += ($lines[0..($tableStart - 2)])        # –≤—Å–µ –¥–æ —à–∞–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
$rebuiltTable += $header
$rebuiltTable += $separator
$rebuiltTable += $updatedBody
# –¥–æ–¥–∞—î–º–æ —Ö–≤—ñ—Å—Ç (–ü—Ä–∏–º—ñ—Ç–∫–∏ –∞–±–æ –∫—ñ–Ω–µ—Ü—å —Å–µ–∫—Ü—ñ—ó)
$rebuiltSection = ($rebuiltTable -join "`r`n")
if ($restTail) { $rebuiltSection += "`r`n" + $restTail }

# –∑–±–∏—Ä–∞–Ω–Ω—è —É—Å—å–æ–≥–æ —Ñ–∞–π–ª—É: –≤—Å–µ –¥–æ –ø–æ—á–∞—Ç–∫—É —Å–µ–∫—Ü—ñ—ó + –æ–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü—ñ—è + –≤—Å–µ –ø—ñ—Å–ª—è —Å–µ–∫—Ü—ñ—ó (—è–∫—â–æ –±—É–ª–æ)
$prefix = $md.Substring(0, $startIdx)
$updatedMd = $prefix + $rebuiltSection

# –∑–∞–ø–∏—Å –Ω–∞–∑–∞–¥ MANIFEST.md
$updatedMd | Set-Content -LiteralPath $ManifestPath -Encoding UTF8

# –≤–∏–≤–æ–¥–∏ (–¥–æ–ø–æ–º—ñ–∂–Ω—ñ)
$null = New-Item -ItemType Directory -Force -Path $OutDir
$checksPath = Join-Path $OutDir 'CHECKSUMS.txt'
$checksums | Set-Content -LiteralPath $checksPath -Encoding UTF8

$jsonPath = Join-Path $OutDir 'BTD_Manifest.json'
$recordsJson | ConvertTo-Json -Depth 4 | Set-Content -LiteralPath $jsonPath -Encoding UTF8

Write-Host "[OK] MANIFEST.md –æ–Ω–æ–≤–ª–µ–Ω–æ: $ManifestPath"
Write-Host "[OK] CHECKSUMS: $checksPath"
Write-Host "[OK] JSON:      $jsonPath"


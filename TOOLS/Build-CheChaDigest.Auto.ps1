<# =========================================================
 Build-CheChaDigest.Auto.ps1
 –ê–≤—Ç–æ—Ä: –°.–ß. | DAO-GOGS Systemtled
 –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç CheCha (MD + TXT)
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–∏—Ç–∞—î –∫–ª—é—á–æ–≤—ñ –ª–æ–≥–∏/—Å—Ç–∞–Ω –∑–∞–¥–∞—á
   ‚Ä¢ –ü—ñ–¥—Å—Ç–∞–≤–ª—è—î —Ñ–∞–∫—Ç–∏—á–Ω—ñ –¥–∞—Ç–∏/—Å—Ç–∞—Ç—É—Å–∏ —É –∫–æ–Ω—Ç–µ–Ω—Ç
 –ü–æ–≤–µ—Ä—Ç–∞—î: 0 ‚Äî OK, 1 ‚Äî –ø–æ–º–∏–ª–∫–∞
 –í–∏–∫–ª–∏–∫:
   pwsh -NoProfile -ExecutionPolicy Bypass -File .\Build-CheChaDigest.Auto.ps1 `
     -OutDir "D:\CHECHA_CORE\C03_LOG\digests" -Open
========================================================= #>

[CmdletBinding()]
param(
  [string]$OutDir = "D:\CHECHA_CORE\C03_LOG\digests",
  [string]$DateTag,                        # yyyy-MM-dd; —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ ‚Äî –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
  [int]$Tail = 40,                         # —Å–∫—ñ–ª—å–∫–∏ —Ä—è–¥–∫—ñ–≤ —á–∏—Ç–∞—Ç–∏ –∑ –∫—ñ–Ω—Ü—è –ª–æ–≥—ñ–≤
  [switch]$Open,
  [switch]$Overwrite
)

function Die($msg){ Write-Host "[ERR] $msg" -ForegroundColor Red; exit 1 }

# --- 0) –î–∞—Ç–∞/—à–ª—è—Ö–∏ -----------------------------------------------------------
try {
  if (-not $DateTag) { $DateTag = (Get-Date).ToString('yyyy-MM-dd') }
  if (!(Test-Path -LiteralPath $OutDir)) {
    New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
  }
  $MdFile  = Join-Path $OutDir "CheCha_Digest_${DateTag}.md"
  $TxtFile = Join-Path $OutDir "CheCha_Digest_${DateTag}.txt"

  if ((Test-Path $MdFile) -and -not $Overwrite) {
    Write-Host "[SKIP] –§–∞–π–ª —ñ—Å–Ω—É—î: $MdFile (–≤–∫–∞–∂–∏ -Overwrite –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É)" -ForegroundColor Yellow
  }
  if ((Test-Path $TxtFile) -and -not $Overwrite) {
    Write-Host "[SKIP] –§–∞–π–ª —ñ—Å–Ω—É—î: $TxtFile (–≤–∫–∞–∂–∏ -Overwrite –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É)" -ForegroundColor Yellow
  }

  # –í—ñ–¥–æ–º—ñ —à–ª—è—Ö–∏
  $RunAlertLog      = "D:\CHECHA_CORE\C07_ANALYTICS\Run-Alert.log"
  $RestoreLogPath   = "D:\CHECHA_CORE\C06_FOCUS\FOCUS_RestoreLog.md"
  $ChecksumsCsvGlob = "D:\CHECHA_CORE\C03_LOG\VerifyChecksums_*.csv"

  # –ó–∞–≤–¥–∞–Ω–Ω—è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ (—ñ–º–µ–Ω–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–º—ñ–Ω–µ–Ω—ñ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
  $Tasks = @(
    @{ Name="CHECHA_Weekly_Publish"; Path="\CHECHA\" },
    @{ Name="LeaderIntel-Daily";     Path="\" }
  )

  # --- helpers ---------------------------------------------------------------
  function TailSafe([string]$path, [int]$n=40){
    if (Test-Path -LiteralPath $path) {
      try { Get-Content -LiteralPath $path -Tail $n -ErrorAction Stop }
      catch { @("<read-error: $path> " + $_.Exception.Message) }
    } else { @("<missing: $path>") }
  }

  function GetTaskInfo([string]$name,[string]$taskPath="\") {
    try {
      $t = Get-ScheduledTask -TaskName $name -TaskPath $taskPath -ErrorAction Stop
      $i = $t | Get-ScheduledTaskInfo
      [pscustomobject]@{
        Name          = $name
        State         = $t.State
        LastRunTime   = $i.LastRunTime
        LastTaskResult= $i.LastTaskResult
        NextRunTime   = $i.NextRunTime
      }
    } catch {
      [pscustomobject]@{
        Name=$name; State="N/A"; LastRunTime=$null; LastTaskResult=$null; NextRunTime=$null
      }
    }
  }

  function DetectGhAuth(){
    $gh = Get-Command gh -ErrorAction SilentlyContinue
    if (-not $gh){ return "gh: not installed" }
    try {
      $status = (gh auth status 2>&1) -join "`n"
      if ($status -match "Logged in to"){
        return "OK"
      } else {
        return "needs login"
      }
    } catch { return "unknown" }
  }

  # --- 1) –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö —ñ–∑ –ª–æ–≥—ñ–≤ ------------------------------------------------
  $runAlertTail = TailSafe $RunAlertLog $Tail
  $runAlertStr  = $runAlertTail -join "`n"
  $runAlertErrors24h = 0
  $now = Get-Date
  # —Ä–∞—Ö—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
  foreach($line in $runAlertTail){
    if ($line -match '^\[(?<ts>[\d\-:\s]+)\].*(ERROR|failed|rc=1)'){
      $ts = $Matches.ts
      $dt = $null
      # —Å–ø—Ä–æ–±–∏ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
      if ([datetime]::TryParse($ts, [ref]$dt)) {
        if ($now - $dt -lt [timespan]::FromHours(24)) { $runAlertErrors24h++ }
      } else {
        # —è–∫—â–æ –Ω–µ —Å–ø–∞—Ä—Å–∏–ª–æ—Å—å ‚Äî –≤—Å–µ –æ–¥–Ω–æ —Ä–∞—Ö—É—î–º–æ —è–∫ –ø–æ–º–∏–ª–∫—É
        $runAlertErrors24h++
      }
    }
  }
  # –∫–ª—é—á–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
  $runAlertLastError = ($runAlertTail | Where-Object { $_ -match '(ERROR|failed|rc=1)' } | Select-Object -Last 1)
  $runAlertLastStart = ($runAlertTail | Where-Object { $_ -match 'START Run-Alert' } | Select-Object -Last 1)
  $runAlertLastEnd   = ($runAlertTail | Where-Object { $_ -match 'END Run-Alert' }   | Select-Object -Last 1)

  # RestoreLog ‚Äî –±–µ—Ä–µ–º–æ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–¥—ñ–π
  $restoreTail = TailSafe $RestoreLogPath 50
  $restoreEvents = $restoreTail | Where-Object { $_ -match '^\-\s*\[\d{4}\-\d{2}\-\d{2}\s' } | Select-Object -Last 5
  $restoreLast   = $restoreEvents | Select-Object -Last 1

  # Checksums ‚Äî –∑–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–∏–π CSV
  $checksumsState = "N/A"
  $csvLatest = Get-ChildItem -Path $ChecksumsCsvGlob -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Desc | Select-Object -First 1
  if ($csvLatest) {
    try {
      $row = Import-Csv -LiteralPath $csvLatest.FullName | Select-Object -First 1
      if ($row){
        $ok          = $row.Ok
        $mismatch    = $row.AnyMismatch
        $missing     = $row.AnyMissing
        $extras      = $row.AnyExtras
        $checksumsState = "Ok=$ok, Missing=$missing, Mismatch=$mismatch, Extras=$extras"
      }
    } catch { $checksumsState = "CSV parse error" }
  }

  # --- 2) –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ -------------------------------------------------------
  $taskInfos = foreach($t in $Tasks){ GetTaskInfo -name $t.Name -taskPath $t.Path }

  # --- 3) Git/GitHub (–æ–ø—Ü—ñ–π–Ω–æ) -----------------------------------------------
  $ghAuth = DetectGhAuth()

  # --- 4) –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É ------------------------------------------------
  # –∫–æ–º–ø–∞–∫—Ç–Ω—ñ —Ä—è–¥–∫–∏ —Å—Ç–∞–Ω—É –∑–∞–¥–∞—á
  $tasksMd = ($taskInfos | ForEach-Object {
    $n = $_.Name
    $state = $_.State
    $l = if ($_.LastRunTime) { $_.LastRunTime.ToString("dd.MM.yyyy HH:mm") } else { "‚Äî" }
    $rc = if ($_.LastTaskResult -ne $null) { $_.LastTaskResult } else { "‚Äî" }
    $nx = if ($_.NextRunTime) { $_.NextRunTime.ToString("dd.MM.yyyy HH:mm") } else { "‚Äî" }
    "- **$n** ‚Äî *$state*, Last: $l (rc=$rc), Next: $nx"
  }) -join "`n"

  $runAlertSummary = @()
  if ($runAlertLastStart) { $runAlertSummary += "‚Ä¢ $runAlertLastStart" }
  if ($runAlertLastEnd)   { $runAlertSummary += "‚Ä¢ $runAlertLastEnd" }
  if ($runAlertLastError) { $runAlertSummary += "‚Ä¢ ERROR: $runAlertLastError" }
  $runAlertSummary += "‚Ä¢ –ü–æ–º–∏–ª–æ–∫ –∑–∞ 24h: $runAlertErrors24h"

  $restoreSummary = if ($restoreEvents) { ($restoreEvents -join "`n") } else { "‚Äî" }

  $md = @"
# ‚ö°Ô∏è CheCha | –©–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç ‚Äî $DateTag

## üß≠ –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
CheCha Core –∞–∫—Ç–∏–≤–Ω–∞; —Ä–æ–±–æ—Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∞.  
–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –π –∞—Ä—Ö—ñ–≤–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—é—Ç—å.  
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä—Ö—ñ–≤—ñ–≤: **$checksumsState**.

---

## ‚öôÔ∏è –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
**Run-Alert (tail):**
$($runAlertSummary -join "`n")

**–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫:**
$tasksMd

---

## üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
- MAT_BALANCE ‚Äî —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—É–∂–∫–∏ (—Ä—è–¥–æ–∫ 60) —â–µ –≤ —Ä–æ–±–æ—Ç—ñ.
- MAT_RESTORE ‚Äî –∞–∫—Ç–∏–≤–Ω–∏–π, –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó:
$restoreSummary

---

## üß© –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∞ –ª—ñ–Ω—ñ—è
- CheCha Flight 4.10 ‚Üí –∫—É—Ä—Å –Ω–∞ ‚Äú–†–∞–¥–∞—Ä –°–≤—ñ–¥–æ–º–æ—Å—Ç—ñ‚Äù.
- ITETA (G43) ‚Üí –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ ‚Äú–í—Å–µ—Å–≤—ñ—Ç ‚Äî –õ—é–¥–∏–Ω–∞ ‚Äî –®–Ü‚Äù.

---

## üì° –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
- GitHub auth —Å—Ç–∞—Ç—É—Å: **$ghAuth**.

---

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (–∞–≤—Ç–æ-–∑–±—ñ—Ä)
1. `Notify-If-Degraded.ps1` ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ `-Path`, –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–≥—ñ–Ω —É Run-Alert.
2. –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–∞–≤–∫—É `Build-MAT-BALANCE-Weekly.ps1` (–Ω–µ–∑–∞–∫—Ä–∏—Ç–∞ `)`).
3. `LeaderIntel-Daily` ‚Äî –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–º—ñ–Ω–Ω–æ—ó `$log`/—à–ª—è—Ö—ñ–≤.
4. GitHub ‚Äî –ø—Ä–∏–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–æ **OK** (`gh auth login --with-token`).
5. –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ `ToxicRadar.html` (–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∏–ø `$rows` –ø–µ—Ä–µ–¥ `.Count`).

---

## ü™∂ –ü—ñ–¥—Å—É–º–æ–∫
–°–∏—Å—Ç–µ–º–∞ –≤ —Ä—É—Å—ñ; **—Ç–µ—Ö–Ω—ñ—á–Ω–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å + –Ω–∞—Ä–æ—â–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏**.  
–§–æ–∫—É—Å ‚Äî —Ç–æ—á–Ω—ñ—Å—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ª–∞–Ω—Ü—é–≥–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å.

_–°.–ß._
"@

  $txt = @"
‚ö°Ô∏è CheCha | –©–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç ‚Äî $DateTag

üß≠ –°—Ç–∞–Ω
–°—Ç–∞–±—ñ–ª—å–Ω–æ; –∞—Ä—Ö—ñ–≤–∏: $checksumsState

‚öôÔ∏è –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
$(($runAlertSummary -join "`n").Replace("‚Ä¢ ","‚Ä¢ "))

–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
$($taskInfos | ForEach-Object {
  "$($_.Name): $($_.State); Last=" +
  "$(if ($_.LastRunTime){ $_.LastRunTime.ToString('dd.MM HH:mm') } else {'‚Äî'})" +
  "; rc=$($_.LastTaskResult); Next=" +
  "$(if ($_.NextRunTime){ $_.NextRunTime.ToString('dd.MM HH:mm') } else {'‚Äî'})"
} | Out-String).Trim()

üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
‚Ä¢ MAT_BALANCE ‚Äî —Ñ—ñ–∫—Å –¥—É–∂–∫–∏ (–≤ —Ä–æ–±–æ—Ç—ñ)
‚Ä¢ MAT_RESTORE ‚Äî –∞–∫—Ç–∏–≤–Ω–∏–π (–æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó ‚Üì)
$restoreSummary

üß© –°—Ç—Ä–∞—Ç–µ–≥—ñ—è
‚Ä¢ Flight 4.10 ‚Üí –†–∞–¥–∞—Ä –°–≤—ñ–¥–æ–º–æ—Å—Ç—ñ
‚Ä¢ ITETA (G43) ‚Üí –í—Å–µ—Å–≤—ñ—Ç‚Äî–õ—é–¥–∏–Ω–∞‚Äî–®–Ü

üì° –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
‚Ä¢ GitHub auth: $ghAuth

üí° To-Do
1) Notify-If-Degraded.ps1 (Path)
2) MAT_BALANCE ‚Äî –¥—É–∂–∫–∞
3) LeaderIntel ‚Äî —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É
4) gh auth login
5) ToxicRadar ‚Äî —Ç–∏–ø $rows

_–°.–ß._
"@

  # --- 5) –ó–∞–ø–∏—Å —Ñ–∞–π–ª—ñ–≤ -------------------------------------------------------
  Set-Content -LiteralPath $MdFile  -Value $md  -Encoding UTF8
  Set-Content -LiteralPath $TxtFile -Value $txt -Encoding UTF8

  Write-Host "[OK] Digest –∑–±–µ—Ä–µ–∂–µ–Ω–æ:" -ForegroundColor Green
  Write-Host " - $MdFile"
  Write-Host " - $TxtFile"

  if ($Open) { Invoke-Item $OutDir }

  exit 0
}
catch {
  Die ("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç: " + $_.Exception.Message)
}

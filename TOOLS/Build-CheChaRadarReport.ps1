<# 
.SYNOPSIS
  Build-CheChaRadarReport.ps1 ‚Äî —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Å–∫–∞–Ω–µ—Ä/–∑–±–∏—Ä–∞—á CheCha Radar.

.DESCRIPTION
  –ß–∏—Ç–∞—î INSTRUMENTS_MAP_v1.0.md —Ç–∞ InfoField_Map_v1.0.md, –ø–∞—Ä—Å–∏—Ç—å markdown-—Ç–∞–±–ª–∏—Ü—ñ,
  —Ä–∞—Ö—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏, —Ñ–æ—Ä–º—É—î Radar Index, —Å—Ç–≤–æ—Ä—é—î:
    - CheCha_Radar_<date>_<version>.md
    - CheCha_Radar_<date>_<version>.html
    - CheCha_Radar_Summary_<date>.csv
    - SIG-MATRIX_<date>.csv
    - CHECKSUMS.txt (SHA256)
  –ü—Ä–∞—Ü—é—î –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥—É–ª—ñ–≤. –í–∏—Ö—ñ–¥ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É C07_ANALYTICS.

.PARAMETER RepoRoot
  –ö–æ—Ä—ñ–Ω—å CHECHA_CORE. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: D:\CHECHA_CORE

.PARAMETER InstrumentsMap
  –®–ª—è—Ö –¥–æ INSTRUMENTS_MAP_v1.0.md. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: $RepoRoot\C12_KNOWLEDGE\MD_SYSTEM\INSTRUMENTS_MAP_v1.0.md
  (—è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –±—É–¥–µ —Å–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —É C06_FOCUS)

.PARAMETER InfoFieldMap
  –®–ª—è—Ö –¥–æ InfoField_Map_v1.0.md. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: $RepoRoot\C12_KNOWLEDGE\MD_SYSTEM\InfoField_Map_v1.0.md
  (—è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –±—É–¥–µ —Å–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —É C06_FOCUS)

.PARAMETER OutDir
  –¢–µ–∫–∞ –¥–ª—è –≤–∏–≤–æ–¥—É. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: $RepoRoot\C07_ANALYTICS

.PARAMETER Version
  –í–µ—Ä—Å—ñ—è –¥–∞—à–±–æ—Ä–¥–∞. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: v1.0

.PARAMETER DateTag
  –î–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ yyyy-MM-dd. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: —Å—å–æ–≥–æ–¥–Ω—ñ (–∑–∞ –ª–æ–∫–∞–ª—å–Ω–∏–º —á–∞—Å–æ–º).

.PARAMETER DryRun
  –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑—É—î –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –±–µ–∑ –∑–∞–ø–∏—Å—É —Ñ–∞–π–ª—ñ–≤.

.EXAMPLE
  pwsh -NoProfile -ExecutionPolicy Bypass `
    -File D:\CHECHA_CORE\TOOLS\Build-CheChaRadarReport.ps1 `
    -Version v1.0

.NOTES
  –ê–≤—Ç–æ—Ä: –°.–ß. | –ö–æ–Ω—Ç—Ä–æ–ª—å: ITETA / SKD-GOGS
#>

[CmdletBinding()]
param(
  [string]$RepoRoot     = "D:\CHECHA_CORE",
  [string]$InstrumentsMap = "",
  [string]$InfoFieldMap   = "",
  [string]$OutDir       = "",
  [string]$Version      = "v1.0",
  [string]$DateTag      = (Get-Date).ToString('yyyy-MM-dd'),
  [switch]$DryRun
)

# ---------- Helpers ----------
function New-Utf8BomWriter([string]$Path){
  $enc = New-Object System.Text.UTF8Encoding($false) # –±–µ–∑ BOM
  # –°—Ç–≤–æ—Ä–∏–º–æ —Ñ–∞–π–ª —ñ –≤—Ä—É—á–Ω—É –¥–æ–¥–∞–º–æ BOM, –ø–æ—Ç—ñ–º –ø–∏—Å–∞—Ç–∏–º–µ–º–æ –≤ –∫—ñ–Ω–µ—Ü—å
  [byte[]]$bom = 0xEF,0xBB,0xBF
  [System.IO.File]::WriteAllBytes($Path, $bom)
  $fs = [System.IO.File]::Open($Path, [System.IO.FileMode]::Append, [System.IO.FileAccess]::Write, [System.IO.FileShare]::Read)
  return New-Object System.IO.StreamWriter($fs, $enc)
}

function Write-Log {
  param([string]$Message, [string]$Level = "INFO")
  $ts = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
  Write-Host "[$Level] $ts $Message"
}

function Read-FileUtf8([string]$Path){
  if(!(Test-Path -LiteralPath $Path)){ throw "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $Path" }
  return [System.IO.File]::ReadAllText($Path,[System.Text.Encoding]::UTF8)
}

# –ü–∞—Ä—Å–µ—Ä markdown-—Ç–∞–±–ª–∏—Ü—å: –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ PSCustomObject
function Parse-MarkdownTables {
  param([string]$Markdown)
  # –ó–Ω–∞–π–¥–µ–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—å –º—ñ–∂ —Ä—è–¥–∫–∞–º–∏ –∑ '|' (–ø—Ä–æ—Å—Ç–∏–π, –∞–ª–µ –Ω–∞–¥—ñ–π–Ω–∏–π –¥–ª—è –Ω–∞—à–∏—Ö –∫–∞—Ä—Ç)
  $lines = $Markdown -split "`r?`n"
  $tables = @()
  $i = 0
  while($i -lt $lines.Count){
    if($lines[$i] -match '^\s*\|.*\|\s*$'){
      # —Ö–µ–¥–µ—Ä
      $header = $lines[$i].Trim()
      # –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–æ–º ---|---|---
      if($i+1 -lt $lines.Count -and $lines[$i+1] -match '^\s*\|\s*:?-{3,}.*\|\s*$'){
        $j = $i+2
        $rows = @()
        while($j -lt $lines.Count -and $lines[$j] -match '^\s*\|.*\|\s*$'){
          $rows += $lines[$j].Trim()
          $j++
        }
        # –†–æ–∑—ñ–±—Ä–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        $cols = ($header.Trim('|') -split '\|').ForEach({ $_.Trim() })
        $objects = @()
        foreach($r in $rows){
          $vals = ($r.Trim('|') -split '\|').ForEach({ $_.Trim() })
          if($vals.Count -lt $cols.Count){
            # –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏
            $vals = $vals + (,@('') * ($cols.Count - $vals.Count))
          }
          $obj = [ordered]@{}
          for($k=0;$k -lt $cols.Count;$k++){
            $obj[$cols[$k]] = $vals[$k]
          }
          $objects += [pscustomobject]$obj
        }
        $tables += [pscustomobject]@{
          StartLine = $i
          EndLine   = $j-1
          Columns   = $cols
          Rows      = $objects
        }
        $i = $j
        continue
      }
    }
    $i++
  }
  return $tables
}

# –í–∏—Ç—è–≥ —Å—Ç–∞—Ç—É—Å-–µ–º–æ–¥–∑—ñ ‚Üí –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å—Ç–∞–Ω
function Normalize-Status([string]$s){
  if(-not $s){ return "unknown" }
  if($s -match 'üü¢|Active|Stable'){ return "active" }
  if($s -match 'üü°|Testing|In\s*progress'){ return "testing" }
  if($s -match 'üîµ|Planned|Design'){ return "planned" }
  if($s -match 'üü†'){ return "progress" }
  if($s -match 'üî¥'){ return "blocked" }
  return $s.ToLower()
}

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–∏—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
function Compute-InstrumentsMetrics($tables){
  $all = @()
  foreach($t in $tables){
    foreach($r in $t.Rows){
      # —à—É–∫–∞—Ç–∏–º–µ–º–æ –∫–æ–ª–æ–Ω–∫—É "–°—Ç–∞—Ç—É—Å" –∞–±–æ –ø–æ–¥—ñ–±–Ω—ñ
      $statusVal = $null
      foreach($c in $t.Columns){
        if($c -match '–°—Ç–∞—Ç—É—Å|Status'){ $statusVal = $r.$c; break }
      }
      if($statusVal){
        $all += Normalize-Status $statusVal
      }
    }
  }
  if($all.Count -eq 0){
    return @{
      ActiveShare  = 0.0
      CleanShare   = 0.0
      TestingShare = 0.0
      PlannedShare = 0.0
      Total        = 0
    }
  }
  $total   = [double]$all.Count
  $active  = ($all | Where-Object {$_ -eq 'active'}).Count / $total
  $testing = ($all | Where-Object {$_ -eq 'testing'}).Count / $total
  $planned = ($all | Where-Object {$_ -eq 'planned'}).Count / $total
  # "—á–∏—Å—Ç–æ—Ç–∞" —è–∫ 1 - —á–∞—Å—Ç–∫–∞ blocked/progress/unknown
  $dirty   = ($all | Where-Object {$_ -in @('blocked','unknown')}).Count / $total
  $clean   = [math]::Max(0.0, 1.0 - $dirty)

  return @{
    ActiveShare  = [math]::Round($active, 4)
    CleanShare   = [math]::Round($clean, 4)
    TestingShare = [math]::Round($testing, 4)
    PlannedShare = [math]::Round($planned, 4)
    Total        = [int]$total
  }
}

# –í–∏—Ç—è–≥ —Ç–∞–±–ª–∏—Ü—ñ "–ö–ê–†–¢–ê –°–ò–ì–ù–ê–õ–Ü–í" –∑ InfoField_Map –¥–ª—è SIG-MATRIX.csv
function Extract-Signals($infoTables){
  # —à—É–∫–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—Ä–∏–∫–ª–∞–¥ —Å–∏–≥–Ω–∞–ª—É", "–î–∂–µ—Ä–µ–ª–æ", "–†—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"
  foreach($t in $infoTables){
    $names = ($t.Columns | ForEach-Object {$_.ToLower()})
    if($names -contains '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è' -and $names -contains '–¥–∂–µ—Ä–µ–ª–æ' -and ($names -contains '–ø—Ä–∏–∫–ª–∞–¥ —Å–∏–≥–Ω–∞–ª—É' -or $names -contains '–ø—Ä–∏–∫–ª–∞–¥') ){
      return $t.Rows
    }
  }
  return @()
}

# –î—É–∂–µ –ø—Ä–æ—Å—Ç–∞ "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è" markdown ‚Üí html (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ)
function Convert-MarkdownToHtml([string]$md){
  # –ü—Ä–æ—Å—Ç–∞ –∑–∞–º—ñ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —ñ –∫–æ–¥-–±–ª–æ–∫—ñ–≤. –î–ª—è –Ω–∞—à–∏—Ö —Ü—ñ–ª–µ–π –≤–∏—Å—Ç–∞—á–∏—Ç—å.
  $html = $md
  $html = $html -replace '```mermaid','<pre class="mermaid">'
  $html = $html -replace '```','</pre>'
  $html = $html -replace '^\#\#\#\#\#\# (.*)$','<h6>$1</h6>' -replace '^\#\#\#\#\# (.*)$','<h5>$1</h5>' -replace '^\#\#\#\# (.*)$','<h4>$1</h4>' -replace '^\#\#\# (.*)$','<h3>$1</h3>' -replace '^\#\# (.*)$','<h2>$1</h2>' -replace '^\# (.*)$','<h1>$1</h1>'
  $html = $html -replace '\*\*(.*?)\*\*','<strong>$1</strong>'
  $html = $html -replace '\*(.*?)\*','<em>$1</em>'
  $html = $html -replace "`r?`n","`n"
  # –û–±–≥–æ—Ä–Ω–µ–º–æ –≤ –±–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω
  return @"
<!DOCTYPE html>
<html lang="uk">
<head>
<meta charset="utf-8"/>
<title>CheCha Radar Report</title>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<style>
  body{font-family: -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin:24px; line-height:1.5}
  table{border-collapse:collapse; width:100%; margin:16px 0}
  th,td{border:1px solid #ddd; padding:8px}
  th{background:#f7f7f7; text-align:left}
  code, pre{background:#0f172a; color:#e2e8f0; padding:8px; border-radius:8px; display:block; overflow:auto}
  .muted{color:#666}
</style>
</head>
<body>
$html
</body>
</html>
"@
}

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è Radar Index (–ø—Ä–æ—Å—Ç–∏–π, –ø—Ä–æ–∑–æ—Ä–∏–π –∞–≥—Ä–µ–≥–∞—Ç)
function Compute-RadarIndex($instMetrics, $sigRows){
  # –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ ‚âà —á–∞—Å—Ç–∫–∞ active —Å–µ—Ä–µ–¥ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ + 0.5*planned (–Ω–æ—Ä–º–æ–≤–∞–Ω–æ)
  $stability = [math]::Min(1.0, $instMetrics.ActiveShare + 0.5*$instMetrics.PlannedShare)
  # –ß–∏—Å—Ç–æ—Ç–∞ –ø–æ–ª—è ‚âà CleanShare
  $clean     = $instMetrics.CleanShare
  # –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: –ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –Ω–µ–Ω–∏–∑—å–∫–∏—Ö –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ —É SIG-MATRIX (üîπ/–≤–∏—Å–æ–∫–∏–π, üî∏/—Å–µ—Ä–µ–¥–Ω—ñ–π)
  $sync = 0.8
  if($sigRows.Count -gt 0){
    $high = ($sigRows | Where-Object { $_.'–†—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É' -match '–í–∏—Å–æ–∫' -or $_.'–†—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É' -match 'üîπ' }).Count
    $mid  = ($sigRows | Where-Object { $_.'–†—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É' -match '–°–µ—Ä–µ–¥–Ω' -or $_.'–†—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É' -match 'üî∏' }).Count
    $sync = [math]::Min(1.0, ($high*1.0 + $mid*0.7) / [math]::Max(1.0, $sigRows.Count))
  }
  # –û—Å–≤—ñ—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ‚Äî –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≤—ñ–¥ planned+active (–ø—Ä–∏–ø—É—â–µ–Ω–Ω—è: –æ—Å–≤—ñ—Ç–∞ –∑—Ä–æ—Å—Ç–∞—î –∑ –ø–ª–∞–Ω–∞–º–∏ —Ç–∞ –∞–∫—Ç–∏–≤–∞–º–∏)
  $edu  = [math]::Min(1.0, 0.6*$instMetrics.ActiveShare + 0.4*$instMetrics.PlannedShare + 0.1)
  # –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ‚Äî –±–ª–∏–∑—å–∫–æ –¥–æ (active + testing), –±–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ä–æ—Å—Ç–µ –∑ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏
  $anal = [math]::Min(1.0, $instMetrics.ActiveShare + 0.5*$instMetrics.TestingShare)

  return [pscustomobject]@{
    SystemStability   = [math]::Round($stability,2)
    InfoCleanliness   = [math]::Round($clean,2)
    CommSync          = [math]::Round($sync,2)
    EducationActivity = [math]::Round($edu,2)
    AnalyticIntegration = [math]::Round($anal,2)
  }
}

# --- Prepare SIG-MATRIX block for Markdown (no $() inside here-string) ---
if ($sigRows.Count -gt 0) {
  $exportName = Split-Path -Leaf $outSig
  $sigBlock = "**–ï–∫—Å–ø–æ—Ä—Ç:** " + ('`' + $exportName + '`')
} else {
  $sigBlock = "_–î–∞–Ω—ñ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –≤ InfoField_Map (—Å–µ–∫—Ü—ñ—è –ö–ê–†–¢–ê –°–ò–ì–ù–ê–õ–Ü–í)._"
}

# ---------- Locate inputs ----------
if(-not $OutDir){ $OutDir = Join-Path $RepoRoot 'C07_ANALYTICS' }
if(!(Test-Path -LiteralPath $OutDir)){ New-Item -ItemType Directory -Path $OutDir -Force | Out-Null }

if(-not $InstrumentsMap){
  $p1 = Join-Path $RepoRoot 'C12_KNOWLEDGE\MD_SYSTEM\INSTRUMENTS_MAP_v1.0.md'
  $p2 = Join-Path $RepoRoot 'C06_FOCUS\INSTRUMENTS_MAP_v1.0.md'
  $InstrumentsMap = (Test-Path $p1) ? $p1 : $p2
}
if(-not $InfoFieldMap){
  $p1 = Join-Path $RepoRoot 'C12_KNOWLEDGE\MD_SYSTEM\InfoField_Map_v1.0.md'
  $p2 = Join-Path $RepoRoot 'C06_FOCUS\InfoField_Map_v1.0.md'
  $InfoFieldMap = (Test-Path $p1) ? $p1 : $p2
}

Write-Log "RepoRoot      : $RepoRoot"
Write-Log "InstrumentsMap: $InstrumentsMap"
Write-Log "InfoFieldMap  : $InfoFieldMap"
Write-Log "OutDir        : $OutDir"
Write-Log "Version/Date  : $Version / $DateTag"

# ---------- Read & parse ----------
$instMd = Read-FileUtf8 $InstrumentsMap
$infoMd = Read-FileUtf8 $InfoFieldMap

$instTables = Parse-MarkdownTables $instMd
$infoTables = Parse-MarkdownTables $infoMd

$instMetrics = Compute-InstrumentsMetrics $instTables
$sigRows     = Extract-Signals $infoTables
$index       = Compute-RadarIndex $instMetrics $sigRows

Write-Log ("Instruments total rows: {0}" -f $instMetrics.Total)
Write-Log ("Signals rows          : {0}" -f $sigRows.Count)
Write-Log ("Index: Stability={0} Clean={1} Sync={2} Edu={3} Anal={4}" -f `
  $index.SystemStability,$index.InfoCleanliness,$index.CommSync,$index.EducationActivity,$index.AnalyticIntegration)

# ---------- Compose outputs ----------
$baseName = "CheCha_Radar_{0}_{1}" -f $DateTag, $Version
$outMd    = Join-Path $OutDir ($baseName + ".md")
$outHtml  = Join-Path $OutDir ($baseName + ".html")
$outCsv   = Join-Path $OutDir ("CheCha_Radar_Summary_{0}.csv" -f $DateTag)
$outSig   = Join-Path $OutDir ("SIG-MATRIX_{0}.csv" -f $DateTag)
$outSha   = Join-Path $OutDir "CHECKSUMS.txt"

# Summary CSV
$summaryRows = @(
  [pscustomobject]@{ Metric="SystemStability";   Value=$index.SystemStability }
  [pscustomobject]@{ Metric="InfoCleanliness";   Value=$index.InfoCleanliness }
  [pscustomobject]@{ Metric="CommSync";          Value=$index.CommSync }
  [pscustomobject]@{ Metric="EducationActivity"; Value=$index.EducationActivity }
  [pscustomobject]@{ Metric="AnalyticIntegration"; Value=$index.AnalyticIntegration }
  [pscustomobject]@{ Metric="ActiveShare";       Value=$instMetrics.ActiveShare }
  [pscustomobject]@{ Metric="TestingShare";      Value=$instMetrics.TestingShare }
  [pscustomobject]@{ Metric="PlannedShare";      Value=$instMetrics.PlannedShare }
  [pscustomobject]@{ Metric="ToolsTotal";        Value=$instMetrics.Total }
)

# SIG-MATRIX CSV (—è–∫—â–æ —î)
if($sigRows.Count -gt 0){
  $sigRows | Export-Csv -NoTypeInformation -Encoding UTF8 -Path $outSig
}

# Markdown Dashboard
$mdContent = @"
# üõ∞Ô∏è CHECHA_RADAR_${Version}
**–î–∞—Ç–∞:** ${DateTag}  
**–ê–≤—Ç–æ—Ä:** –°.–ß.  
**–ö–æ–Ω—Ç—Ä–æ–ª—å:** ITETA / SKD-GOGS

---

## üìä Radar Index
| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–Ω—è |
|---|---:|
| –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ | ${($index.SystemStability).ToString("0.00")} |
| –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ —á–∏—Å—Ç–æ—Ç–∞ | ${($index.InfoCleanliness).ToString("0.00")} |
| –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è | ${($index.CommSync).ToString("0.00")} |
| –û—Å–≤—ñ—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å | ${($index.EducationActivity).ToString("0.00")} |
| –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è | ${($index.AnalyticIntegration).ToString("0.00")} |

> *–§–æ—Ä–º—É—î—Ç—å—Å—è –∑ INSTRUMENTS_MAP —Ç–∞ InfoField_Map (—Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤ —ñ SIG-MATRIX).*

---

## ‚öôÔ∏è –ú–µ—Ç—Ä–∏–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
| –ü–æ–∫–∞–∑–Ω–∏–∫ | –ó–Ω–∞—á–µ–Ω–Ω—è |
|---|---:|
| –ß–∞—Å—Ç–∫–∞ Active/Stable | ${($instMetrics.ActiveShare).ToString("0.00")} |
| –ß–∞—Å—Ç–∫–∞ Testing | ${($instMetrics.TestingShare).ToString("0.00")} |
| –ß–∞—Å—Ç–∫–∞ Planned | ${($instMetrics.PlannedShare).ToString("0.00")} |
| –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —É –≤–∏–±—ñ—Ä—Ü—ñ | ${$instMetrics.Total} |

---

## üîÅ –î–∂–µ—Ä–µ–ª–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ (SIG-MATRIX)
$sigBlock

## üß≠ –ü—Ä–∏–º—ñ—Ç–∫–∏
- –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–æ–∑–æ—Ä—ñ: **active/stable/testing/planned** –∑—á–∏—Ç—É—é—Ç—å—Å—è –∑ –∫–æ–ª–æ–Ω–æ–∫ **–°—Ç–∞—Ç—É—Å/Status** —É markdown-—Ç–∞–±–ª–∏—Ü—è—Ö.
- –ó–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–Ω–∞ —É—Ç–æ—á–Ω—é–≤–∞—Ç–∏, –ø—ñ–¥–∫–ª—é—á–∏–≤—à–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ (Looker, CSV –∑ –º–∞—Ç—Ä–∏—Ü—å).
- –î–ª—è HTML-–≤–µ—Ä—Å—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–∞–∑–æ–≤–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è (–±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥—É–ª—ñ–≤).

**–ü—ñ–¥–ø–∏—Å:** –°.–ß.
"@

# ---------- Write files ----------
if($DryRun){
  Write-Log "[DRYRUN] ${outMd}"
  Write-Log "[DRYRUN] ${outHtml}"
  Write-Log "[DRYRUN] ${outCsv}"
  if($sigRows.Count -gt 0){ Write-Log "[DRYRUN] ${outSig}" }
  exit 0
}

# Markdown (UTF-8 BOM)
$sw = New-Utf8BomWriter $outMd
$sw.Write($mdContent)
$sw.Flush(); $sw.Dispose()

# HTML
$html = Convert-MarkdownToHtml $mdContent
[System.IO.File]::WriteAllText($outHtml, $html, [System.Text.Encoding]::UTF8)

# Summary CSV
$summaryRows | Export-Csv -NoTypeInformation -Encoding UTF8 -Path $outCsv

# CHECKSUMS
$hashes = @()
foreach($f in @($outMd,$outHtml,$outCsv)){
  if(Test-Path $f){
    $h = (Get-FileHash -Algorithm SHA256 -LiteralPath $f).Hash
    $hashes += "{0}  {1}" -f $h, (Split-Path -Leaf $f)
  }
}
if(Test-Path $outSig){
  $h = (Get-FileHash -Algorithm SHA256 -LiteralPath $outSig).Hash
  $hashes += "{0}  {1}" -f $h, (Split-Path -Leaf $outSig)
}
$sw2 = New-Utf8BomWriter $outSha
$sw2.WriteLine("# CHECKSUMS (SHA-256)")
$sw2.WriteLine("# Date: $DateTag  Version: $Version")
$hashes | ForEach-Object { $sw2.WriteLine($_) }
$sw2.Flush(); $sw2.Dispose()

Write-Log "DONE. Radar files:"
Write-Log " - $outMd"
Write-Log " - $outHtml"
Write-Log " - $outCsv"
if(Test-Path $outSig){ Write-Log " - $outSig" }
Write-Log " - $outSha"

try {
  & "D:\CHECHA_CORE\TOOLS\Write-MetaLayerEntry.ps1" `
    -Event "CheCha_Radar $Version" `
    -Intent "–î–æ–±–æ–≤–∏–π –∑—Ä—ñ–∑ Radar Index" `
    -Observation "–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ md/html/csv; –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ SHA256." `
    -Insight "–ö–æ–ª–∏–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ø–æ–≤'—è–∑–∞–Ω–µ –∑ Testing‚ÜíActive." `
    -EmotionalTone "–≥–ª–∏–±–∏–Ω–∞" `
    -BalanceShift 0.15 `
    -MetaIndex $index.SystemStability `
    -Tags Analytic,Tech,Balance
} catch {
  Write-Host "[WARN] MetaLayer log append failed: $($_.Exception.Message)" -ForegroundColor Yellow
}

# --- [META LAYER LOG APPEND] --------------------------------------------
try {
    $metaScript = "D:\CHECHA_CORE\TOOLS\Write-MetaLayerEntry.ps1"
    if (Test-Path $metaScript) {
        & $metaScript `
          -Event ("CheCha_Radar " + $Version) `
          -Intent "–î–æ–±–æ–≤–∏–π –∑—Ä—ñ–∑ Radar Index" `
          -Observation "–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ md/html/csv; –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ SHA256." `
          -Insight "–ö–æ–ª–∏–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ø–æ–≤'—è–∑–∞–Ω–µ –∑ Testing->Active." `
          -EmotionalTone "–≥–ª–∏–±–∏–Ω–∞" `
          -BalanceShift 0.15 `
          -MetaIndex 0.78 `
          -Tags Analytic,Tech,Balance
    } else {
        Write-Host "[WARN] META script not found: $metaScript" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "[WARN] Failed to append META entry: $($_.Exception.Message)" -ForegroundColor Yellow
}
# -------------------------------------------------------------------------

# --- –î–û –î–û–î–ê–í–ê–ù–ù–Ø $mdContent: –ø—ñ–¥–≥–æ—Ç—É–π $sigBlock ---
if ($sigRows.Count -gt 0) {
  $exportName = Split-Path -Leaf $outSig
  # —Ä–æ–±–∏–º–æ markdown-–æ–±—Ä–∞–º–ª–µ–Ω–Ω—è —ñ–º‚Äô—è —Ñ–∞–π–ª—É —É –∑–≤–æ—Ä–æ—Ç–Ω—ñ –ª–∞–ø–∫–∏ –±–µ–∑ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ—ó —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—ó
  $sigBlock = "**–ï–∫—Å–ø–æ—Ä—Ç:** " + ('`' + $exportName + '`')
} else {
  $sigBlock = "_–î–∞–Ω—ñ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –≤ InfoField_Map (—Å–µ–∫—Ü—ñ—è –ö–ê–†–¢–ê –°–ò–ì–ù–ê–õ–Ü–í)._"
}

# --- –¢–ï–ü–ï–† –§–û–†–ú–£–Ñ–ú–û $mdContent (–±–µ–∑ —É–º–æ–≤ —É—Å–µ—Ä–µ–¥–∏–Ω—ñ here-string) ---
$mdContent = @"
# üõ∞Ô∏è CHECHA_RADAR_${Version}
**–î–∞—Ç–∞:** ${DateTag}  
**–ê–≤—Ç–æ—Ä:** –°.–ß.  
**–ö–æ–Ω—Ç—Ä–æ–ª—å:** ITETA / SKD-GOGS

---

## üìä Radar Index
| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–Ω—è |
|---|---:|
| –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ | ${($index.SystemStability).ToString("0.00")} |
| –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ —á–∏—Å—Ç–æ—Ç–∞ | ${($index.InfoCleanliness).ToString("0.00")} |
| –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è | ${($index.CommSync).ToString("0.00")} |
| –û—Å–≤—ñ—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å | ${($index.EducationActivity).ToString("0.00")} |
| –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è | ${($index.AnalyticIntegration).ToString("0.00")} |

> *–§–æ—Ä–º—É—î—Ç—å—Å—è –∑ INSTRUMENTS_MAP —Ç–∞ InfoField_Map (—Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤ —ñ SIG-MATRIX).*

---

## ‚öôÔ∏è –ú–µ—Ç—Ä–∏–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
| –ü–æ–∫–∞–∑–Ω–∏–∫ | –ó–Ω–∞—á–µ–Ω–Ω—è |
|---|---:|
| –ß–∞—Å—Ç–∫–∞ Active/Stable | ${($instMetrics.ActiveShare).ToString("0.00")} |
| –ß–∞—Å—Ç–∫–∞ Testing | ${($instMetrics.TestingShare).ToString("0.00")} |
| –ß–∞—Å—Ç–∫–∞ Planned | ${($instMetrics.PlannedShare).ToString("0.00")} |
| –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —É –≤–∏–±—ñ—Ä—Ü—ñ | ${$instMetrics.Total} |

---

## üîÅ –î–∂–µ—Ä–µ–ª–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ (SIG-MATRIX)
$sigBlock

---

## üß≠ –ü—Ä–∏–º—ñ—Ç–∫–∏
- –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–æ–∑–æ—Ä—ñ: **active/stable/testing/planned** –∑—á–∏—Ç—É—é—Ç—å—Å—è –∑ –∫–æ–ª–æ–Ω–æ–∫ **–°—Ç–∞—Ç—É—Å/Status** —É markdown-—Ç–∞–±–ª–∏—Ü—è—Ö.
- –ó–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–Ω–∞ —É—Ç–æ—á–Ω—é–≤–∞—Ç–∏, –ø—ñ–¥–∫–ª—é—á–∏–≤—à–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ (Looker, CSV –∑ –º–∞—Ç—Ä–∏—Ü—å).
- –î–ª—è HTML-–≤–µ—Ä—Å—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–∞–∑–æ–≤–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è (–±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –º–æ–¥—É–ª—ñ–≤).

**–ü—ñ–¥–ø–∏—Å:** –°.–ß.
"@


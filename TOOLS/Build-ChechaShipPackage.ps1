<#
.SYNOPSIS
  –ó–±—ñ—Ä–∫–∞ —Ä–µ–ª—ñ–∑–Ω–æ–≥–æ ZIP-–ø–∞–∫–µ—Ç–∞ "–ö–æ—Ä–∞–±–µ–ª—å CHECHA": –≤–µ—Ä—Å—ñ–æ–Ω—É–≤–∞–Ω–Ω—è, MANIFEST (SHA-256),
  CHECKSUMS.txt, CHANGELOG (+Banner meta), README, –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—è, .sha256, JSON-summary.

  –ü—ñ–¥—Ç—Ä–∏–º—É—î:
    - –†–æ–±–æ—Ç—É –≤—ñ–¥ —Ä–æ–±–æ—á–æ—ó —Ç–µ–∫–∏ (-WorkRoot) –∞–±–æ –≤—ñ–¥ ZIP (-WorkRootZip) –∑ –∞–≤—Ç–æ-—Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è–º (TMP cleanup).
    - PS < 7.4 (fallback –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤).
    - –û–ø—Ü—ñ–π–Ω–∏–π git-—Ç–µ–≥ (-GitTag) —ñ GitHub —Ä–µ–ª—ñ–∑ (-GitHubRelease).
    - –ü–æ—Å—Ç-–∫—Ä–æ–∫: .sha256 –ø–æ—Ä—É—á —ñ–∑ ZIP —ñ JSON-–ø—ñ–¥—Å—É–º–æ–∫ —É C03_LOG.
    - SelfTest: —Å—É—Ö–∏–π –ø—Ä–æ–≥—ñ–Ω –±–µ–∑ –∑–º—ñ–Ω (-SelfTest).

.PARAMETER SelfTest
  –°—É—Ö–∏–π –ø—Ä–æ–≥—ñ–Ω: –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å—É—î, –ª–∏—à–µ –¥—Ä—É–∫—É—î –∫—Ä–æ–∫–∏/–ø—Ä–æ–≥–Ω–æ–∑ –≤–µ—Ä—Å—ñ—ó/—ñ–º–µ–Ω.
#>

[CmdletBinding()]
param(
    [string]$WorkRoot,
    [string]$WorkRootZip,

    [string]$ExportsRoot = "D:\CHECHA_CORE\EXPORTS",
    [string]$LogsRoot = "D:\CHECHA_CORE\C03_LOG",
    [string]$PackageName = "CHECHA_Ship",
    [string]$Version,                 # –æ–ø—Ü—ñ–π–Ω–æ (X.Y); —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî auto-bump –∑ version.txt
    [string]$BannerPath,              # –æ–ø—Ü—ñ–π–Ω–æ: –¥–∂–µ—Ä–µ–ª–æ –±–∞–Ω–µ—Ä–∞ ‚Üí visuals/CHECHA_Ship_Banner.png
    [switch]$SoftFail,                # –Ω–µ –ø–∞–¥–∞—Ç–∏ –Ω–∞ –¥—Ä—ñ–±–Ω–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö
    [switch]$GitTag,                  # —Å—Ç–≤–æ—Ä–∏—Ç–∏ git-—Ç–µ–≥ checha-ship-vX.Y
    [string]$RepoRoot,                # git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –¥–ª—è —Ç–µ–≥—É/—Ä–µ–ª—ñ–∑—É
    [switch]$GitHubRelease,           # —Å—Ç–≤–æ—Ä–∏—Ç–∏ GitHub —Ä–µ–ª—ñ–∑ —á–µ—Ä–µ–∑ gh
    [switch]$SelfTest                 # —Å—É—Ö–∏–π –ø—Ä–æ–≥—ñ–Ω
)

# ---------- Helpers ----------
function Die($msg) { Write-Host "[ERR] $msg" -ForegroundColor Red; exit 1 }
function Warn($msg) { Write-Host "[WARN] $msg" -ForegroundColor Yellow }
function Info($msg) { Write-Host "[INFO] $msg" -ForegroundColor Cyan }

function Echo-Step($name, $detail) {
    Write-Host ("[SELFTEST] {0}: {1}" -f $name, $detail) -ForegroundColor DarkCyan
}

# –ö—Ä–æ—Å-–≤–µ—Ä—Å—ñ–π–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ–≥–æ —à–ª—è—Ö—É + –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è '/' –¥–ª—è MANIFEST/CHECKSUMS
function Get-RelPath([string]$Full, [string]$Base) {
    try {
        $rp = Resolve-Path -LiteralPath $Full -Relative -RelativeBasePath $Base -ErrorAction Stop
        return ($rp -replace '\\', '/')
    }
    catch {
        if ($Full.StartsWith($Base, [System.StringComparison]::OrdinalIgnoreCase)) {
            $rel = $Full.Substring($Base.Length).TrimStart('\', '/')
            return ($rel -replace '\\', '/')
        }
        return ((Split-Path -Path $Full -Leaf) -replace '\\', '/')
    }
}

# –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è README.md
function New-ReadmeChechaShip([string]$OutDir, [string]$Version, [string]$ZipName, [string]$ZipSha256, [string]$ReleaseDate) {
    $readmePath = Join-Path $OutDir "README.md"
    $md = @"
# üöÄ CHECHA Ship v$Version

![CHECHA Ship Banner](visuals/CHECHA_Ship_Banner.png)

---

## ‚ÑπÔ∏è –û–ø–∏—Å
**CHECHA Ship** ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π –ø–∞–∫—É–Ω–æ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ CHECHA_CORE —É —Ñ–æ—Ä–º–∞—Ç—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ ZIP-–∞—Ä—Ö—ñ–≤—É.
–í–µ—Ä—Å—ñ—è **v$Version** –∑—ñ–±—Ä–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏ —ñ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—î—é –ø–∞–π–ø–ª–∞–π–Ω–∞.

---

## üì¶ –î–µ—Ç–∞–ª—ñ —Ä–µ–ª—ñ–∑—É
- **Tag:** \`checha-ship-v$Version\`
- **–î–∞—Ç–∞:** $ReleaseDate
- **–ê—Ä—Ç–µ—Ñ–∞–∫—Ç:** \`$ZipName\`
- **SHA256:**
  \`\`\`
  $ZipSha256
  \`\`\`
- **–§–∞–π–ª–∏:** \`MANIFEST.md\`, \`CHECKSUMS.txt\`, \`CHANGELOG.md\`, \`version.txt\`

---

## üÜï –ù–æ–≤–µ —É v$Version
- Auto-bump –≤–µ—Ä—Å—ñ—ó —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–ª–∞–¥–∞–Ω–Ω—è ZIP
- \`.sha256\` –ø–æ—Ä—É—á —ñ–∑ —Ä–µ–ª—ñ–∑–Ω–∏–º –∞—Ä—Ö—ñ–≤–æ–º
- Summary JSON —É \`C03_LOG\`
- –û–Ω–æ–≤–ª–µ–Ω–æ MANIFEST (SHA-256) —Ç–∞ CHECKSUMS
- –û—á–∏—Å—Ç–∫–∞ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ç–µ–∫ –ø—ñ—Å–ª—è –∑–±—ñ—Ä–∫–∏

---

## üìò –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
1. –†–æ–∑–ø–∞–∫—É–π \`$ZipName\` —É —Ä–æ–±–æ—á—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é.
2. –ü–µ—Ä–µ–≤—ñ—Ä —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é \`CHECKSUMS.txt\` –∞–±–æ \`.sha256\`:
   \`\`\`powershell
   Get-FileHash .\$ZipName -Algorithm SHA256
   \`\`\`
3. –í–º—ñ—Å—Ç –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ **CHECHA_CORE**.

---

¬© $(Get-Date -Format 'yyyy') **DAO-GOGS | CHECHA_CORE**
_–ó—ñ–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º._
"@

    if (Test-Path -LiteralPath (Join-Path $OutDir "visuals/CHECHA_Ship_Banner.png")) {
        $md += "`n> _Banner –≤–∫–ª—é—á–µ–Ω–æ –¥–æ —Ä–µ–ª—ñ–∑—É (`visuals/CHECHA_Ship_Banner.png`)._`n"
    }

    Set-Content -Path $readmePath -Encoding UTF8 -Value $md
    return $readmePath
}

# ---------- 0) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—ñ–≤ ----------
New-Item -ItemType Directory -Force -Path $ExportsRoot | Out-Null
New-Item -ItemType Directory -Force -Path $LogsRoot    | Out-Null
$stamp = Get-Date -Format 'yyyy-MM-dd_HH-mm-ss'
$logFile = Join-Path $LogsRoot ("Build-ChechaShipPackage_{0}.log" -f $stamp)
"[$(Get-Date -Format 'u')] START Build Checha Ship" | Out-File -FilePath $logFile -Encoding UTF8

# ---------- 0.1) –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ ZIP ‚Äî —Ä–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏ —É TMP ----------
if ($WorkRootZip) {
    if (-not (Test-Path -LiteralPath $WorkRootZip)) { Die "WorkRootZip –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $WorkRootZip" }
    $script:tmp = Join-Path ([System.IO.Path]::GetTempPath()) ("checha_ship_" + [guid]::NewGuid().ToString())
    New-Item -ItemType Directory -Force -Path $script:tmp | Out-Null
    Expand-Archive -Path $WorkRootZip -DestinationPath $script:tmp -Force
    $inner = Get-ChildItem $script:tmp | Where-Object { $_.PSIsContainer } | Select-Object -First 1
    if ($inner) { $WorkRoot = $inner.FullName } else { $WorkRoot = $script:tmp }
    Info "ZIP —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ –¥–æ $WorkRoot" | Tee-Object -FilePath $logFile -Append | Out-Null
}

# ---------- 0.2) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ WorkRoot ----------
if (-not $WorkRoot) { Die "–ù–µ –≤–∫–∞–∑–∞–Ω–æ WorkRoot/WorkRootZip" }
if (!(Test-Path -LiteralPath $WorkRoot)) { Die "WorkRoot –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $WorkRoot" }

# ---------- SelfTest: —Ä–∞–Ω–Ω—ñ–π –≤–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º ----------
if ($SelfTest) {
    Echo-Step "Input"   ("WorkRoot={0}; WorkRootZip={1}" -f $WorkRoot, $WorkRootZip)
    Echo-Step "Outputs" ("ExportsRoot={0}; LogsRoot={1}" -f $ExportsRoot, $LogsRoot)

    $predVersion = $Version
    if (-not $predVersion) {
        $versionTxt = Join-Path $WorkRoot "version.txt"
        if (Test-Path $versionTxt) {
            $first = (Get-Content $versionTxt -TotalCount 1).Trim()
            if ($first -match 'v(\d+)\.(\d+)') {
                $maj = [int]$Matches[1]; $min = [int]$Matches[2] + 1
                $predVersion = "{0}.{1}" -f $maj, $min
            }
            else { $predVersion = "1.0" }
        }
        else { $predVersion = "1.0" }
    }
    $predTag = "checha-ship-v$predVersion"
    $predOutDirName = "{0}_v{1}" -f $PackageName, $predVersion
    $predZipName = "{0}_v{1}.zip" -f $PackageName, $predVersion
    $predZipPath = Join-Path $ExportsRoot $predZipName

    Echo-Step "Version" ("tag={0}; outDir={1}; zip={2}" -f $predTag, $predOutDirName, $predZipPath)
    if ($GitTag) { Echo-Step "Planned" "Git tag + push in $RepoRoot" }
    if ($GitHubRelease) { Echo-Step "Planned" "GitHub release via gh" }
    if ($BannerPath) { Echo-Step "Planned" "Copy banner ‚Üí visuals/CHECHA_Ship_Banner.png" }
    Echo-Step "Planned" "Update version.txt, CHANGELOG.md, MANIFEST.md, CHECKSUMS.txt, README.md, ZIP, .sha256, JSON summary"
    Echo-Step "Exit"    "SelfTest completed"
    exit 0
}

# ---------- 1) –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó ----------
$versionTxt = Join-Path $WorkRoot "version.txt"
if (-not $Version) {
    if (Test-Path -LiteralPath $versionTxt) {
        $first = (Get-Content $versionTxt -TotalCount 1).Trim()
        if ($first -match 'v(\d+)\.(\d+)') {
            $maj = [int]$Matches[1]; $min = [int]$Matches[2] + 1
            $Version = "{0}.{1}" -f $maj, $min
            Info "–ü—ñ–¥–≤–∏—â—É—é –≤–µ—Ä—Å—ñ—é: $($Matches[0]) -> v$Version" | Tee-Object -FilePath $logFile -Append | Out-Null
        }
        else {
            $Version = "1.0"
            Warn "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—Å—ñ—é —É version.txt ‚Äî –±–µ—Ä—É v$Version" | Tee-Object -FilePath $logFile -Append | Out-Null
        }
    }
    else {
        $Version = "1.0"
        Warn "version.txt –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –±–µ—Ä—É v$Version" | Tee-Object -FilePath $logFile -Append | Out-Null
    }
}
$tag = "checha-ship-v$Version"
$outDirName = "{0}_v{1}" -f $PackageName, $Version
$outDir = Join-Path (Split-Path -Parent $WorkRoot) $outDirName

# ---------- 2) –†–æ–±–æ—á–∞ –∫–æ–ø—ñ—è ----------
if (Test-Path -LiteralPath $outDir) { Remove-Item -Recurse -Force $outDir }
New-Item -ItemType Directory -Force -Path $outDir | Out-Null
Copy-Item -Recurse -Force -Path (Join-Path $WorkRoot '*') -Destination $outDir

# ---------- 3) –ë–∞–Ω–µ—Ä (–æ–ø—Ü—ñ–π–Ω–æ) ----------
$visualsDir = Join-Path $outDir "visuals"
New-Item -ItemType Directory -Force -Path $visualsDir | Out-Null
$targetBanner = Join-Path $visualsDir "CHECHA_Ship_Banner.png"
if ($BannerPath) {
    if (Test-Path -LiteralPath $BannerPath) {
        Copy-Item -Force -LiteralPath $BannerPath -Destination $targetBanner
        Info "–ë–∞–Ω–µ—Ä –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: $targetBanner" | Tee-Object -FilePath $logFile -Append | Out-Null
    }
    else {
        $msg = "BannerPath –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $BannerPath"
        if ($SoftFail) { Warn $msg | Tee-Object -FilePath $logFile -Append | Out-Null } else { Die $msg }
    }
}
elseif (!(Test-Path -LiteralPath $targetBanner)) {
    Warn "–ë–∞–Ω–µ—Ä –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (visuals/CHECHA_Ship_Banner.png). –ü—Ä–æ–¥–æ–≤–∂—É—é‚Ä¶" | Tee-Object -FilePath $logFile -Append | Out-Null
}

# ---------- 4) –û–Ω–æ–≤–∏—Ç–∏ version.txt ----------
$today = Get-Date -Format 'yyyy-MM-dd'
$versionBody = "$tag`n$today`n"
Set-Content -Path (Join-Path $outDir "version.txt") -Encoding UTF8 -Value $versionBody

# --- Banner meta (—è–∫—â–æ —î) ---
$bannerNote = $null
$bannerRel = "visuals/CHECHA_Ship_Banner.png"
$bannerAbs = Join-Path $outDir $bannerRel
if (Test-Path -LiteralPath $bannerAbs) {
    try {
        $bannerSha = (Get-FileHash -LiteralPath $bannerAbs -Algorithm SHA256).Hash.ToLower()
        $bannerLen = (Get-Item -LiteralPath $bannerAbs).Length
        $bannerNote = "- Banner: `$bannerRel` (size: $bannerLen bytes, sha256: $bannerSha)"
    }
    catch {
        $bannerNote = "- Banner: `$bannerRel` (sha256: n/a)"
    }
}

# ---------- 5) –û–Ω–æ–≤–∏—Ç–∏ CHANGELOG.md (prepend) ----------
$chlog = Join-Path $outDir "CHANGELOG.md"
$header = "# CHANGELOG ‚Äî CHECHA Ship"
$newEntryLines = @(
    "## v$Version ‚Äî $today",
    "- –†–µ–ª—ñ–∑ –ø–∞–∫–µ—Ç–∞: $outDirName",
    "- –û–Ω–æ–≤–ª–µ–Ω–æ MANIFEST (SHA-256), CHECKSUMS —ñ ZIP-–∞—Ä—Ö—ñ–≤."
)
if ($bannerNote) { $newEntryLines += $bannerNote }
$newEntry = $newEntryLines -join "`n"

if (Test-Path -LiteralPath $chlog) {
    $old = (Get-Content $chlog -Raw)
    if ($old -notmatch '^\s*#\s*CHANGELOG') { $old = "$header`n`n$old" }
    Set-Content -Path $chlog -Encoding UTF8 -Value "$header`n`n$newEntry`n$old"
}
else {
    Set-Content -Path $chlog -Encoding UTF8 -Value "$header`n`n$newEntry`n"
}

# ---------- 6) MANIFEST.md + CHECKSUMS.txt ----------
$manifestPath = Join-Path $outDir "MANIFEST.md"
$checksPath = Join-Path $outDir "CHECKSUMS.txt"

$files = Get-ChildItem -Path $outDir -Recurse -File | Sort-Object FullName
$rows = @()
$checks = @()

foreach ($f in $files) {
    $rel = Get-RelPath -Full $f.FullName -Base $outDir
    $hash = (Get-FileHash -LiteralPath $f.FullName -Algorithm SHA256).Hash.ToLower()
    $rows += "| $rel | $($f.Length) | `$hash` |"
    $checks += "$hash *$rel"
}

$manifest = @("# MANIFEST ‚Äî $outDirName", "", "| file | size_bytes | sha256 |", "|---|---:|---|") + $rows
Set-Content -Path $manifestPath -Encoding UTF8  -Value ($manifest -join "`n")
Set-Content -Path $checksPath   -Encoding ASCII -NoNewline -Value (($checks -join "`r`n") + "`r`n")

# ---------- 7) –ó–±—ñ—Ä–∫–∞ ZIP ----------
$zipName = "{0}_v{1}.zip" -f $PackageName, $Version
$zipPath = Join-Path $ExportsRoot $zipName
if (Test-Path -LiteralPath $zipPath) { Remove-Item -Force $zipPath }
Compress-Archive -Path (Join-Path $outDir '*') -DestinationPath $zipPath -Force

# ---------- 8) –ü—ñ–¥—Å—É–º–æ–∫ ----------
$zipHash = (Get-FileHash -LiteralPath $zipPath -Algorithm SHA256).Hash.ToLower()
$sum = @"
--- SUMMARY ---
Tag:        $tag
OutDir:     $outDir
ZIP:        $zipPath
ZIP_SHA256: $zipHash
Timestamp:  $(Get-Date -Format 'u')
"@
$sum | Tee-Object -FilePath $logFile -Append | Out-Host

# ---------- 8.1) README.md ----------
try {
    $readmeMade = New-ReadmeChechaShip -OutDir $outDir -Version $Version -ZipName $zipName -ZipSha256 $zipHash -ReleaseDate $today
    Info "README.md –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: $readmeMade" | Tee-Object -FilePath $logFile -Append | Out-Null
}
catch {
    Warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ README.md: $($_.Exception.Message)" | Tee-Object -FilePath $logFile -Append | Out-Null
}

# ---------- 9) –û–ø—Ü—ñ–π–Ω–æ: Git-—Ç–µ–≥ —ñ GitHub-—Ä–µ–ª—ñ–∑ ----------
if ($GitTag -or $GitHubRelease) {
    if (-not $RepoRoot) {
        Warn "GitTag/GitHubRelease —É–≤—ñ–º–∫–Ω–µ–Ω–æ, –∞–ª–µ RepoRoot –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é" | Tee-Object -FilePath $logFile -Append | Out-Null
    }
    else {
        Push-Location $RepoRoot
        try {
            git rev-parse --is-inside-work-tree 2>$null | Out-Null
            if ($LASTEXITCODE -ne 0) { throw "–ù–µ git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π: $RepoRoot" }

            if ($GitTag) {
                git tag -a $tag -m "Release $tag" 2>$null
                if ($LASTEXITCODE -ne 0) {
                    Warn "–¢–µ–≥ $tag –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é" | Tee-Object -FilePath $logFile -Append | Out-Null
                }
                else {
                    git push origin $tag | Out-Null
                    Info "–¢–µ–≥ –∑–∞–ø—É—à–µ–Ω–æ: $tag" | Tee-Object -FilePath $logFile -Append | Out-Null
                }
            }

            if ($GitHubRelease) {
                $cmd = "gh release create `"$tag`" `"$zipPath`" --title `"$tag`" --notes `"$outDirName`""
                Info "gh release: $cmd" | Tee-Object -FilePath $logFile -Append | Out-Null
                try {
                    & gh release create $tag $zipPath --title $tag --notes $outDirName | Out-Null
                    Info "GitHub —Ä–µ–ª—ñ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–æ." | Tee-Object -FilePath $logFile -Append | Out-Null
                }
                catch {
                    Warn "–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ GitHub —Ä–µ–ª—ñ–∑ (gh). –î–µ—Ç–∞–ª—ñ: $($_.Exception.Message)" | Tee-Object -FilePath $logFile -Append | Out-Null
                }
            }
        }
        catch {
            Warn $_.Exception.Message | Tee-Object -FilePath $logFile -Append | Out-Null
        }
        finally {
            Pop-Location
        }
    }
}

# ---------- 9.1) –ü–æ—Å—Ç-–∫—Ä–æ–∫: .sha256 –ø–æ—Ä—É—á —ñ–∑ ZIP + JSON summary —É C03_LOG ----------
try {
    $zipSha = (Get-FileHash -LiteralPath $zipPath -Algorithm SHA256).Hash.ToLower()
    Set-Content -Path ($zipPath + ".sha256") -Encoding ASCII -Value "$zipSha *$(Split-Path $zipPath -Leaf)"
    Info "SHA256 –∑–∞–ø–∏—Å–∞–Ω–æ: $zipSha" | Tee-Object -FilePath $logFile -Append | Out-Null
}
catch {
    Warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ .sha256: $($_.Exception.Message)" | Tee-Object -FilePath $logFile -Append | Out-Null
}

try {
    $summary = [pscustomobject]@{
        Tag       = $tag
        OutDir    = $outDir
        Zip       = $zipPath
        ZipSHA256 = $zipSha
        Timestamp = (Get-Date -Format 'u')
    }
    $jsonPath = Join-Path $LogsRoot ("Build-ChechaShipPackage_{0}.json" -f $stamp)
    $summary | ConvertTo-Json -Depth 5 | Set-Content $jsonPath -Encoding UTF8
    Info "Summary JSON: $jsonPath" | Tee-Object -FilePath $logFile -Append | Out-Null
}
catch {
    Warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ Summary JSON: $($_.Exception.Message)" | Tee-Object -FilePath $logFile -Append | Out-Null
}

# ---------- 10) –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è TMP –ø—ñ—Å–ª—è WorkRootZip ----------
if ($WorkRootZip -and (Get-Variable -Name tmp -Scope Script -ErrorAction SilentlyContinue)) {
    if (Test-Path $script:tmp) {
        try {
            Remove-Item -Recurse -Force $script:tmp
            Info "TMP –æ—á–∏—â–µ–Ω–æ: $script:tmp" | Tee-Object -FilePath $logFile -Append | Out-Null
        }
        catch {
            Warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ TMP ($script:tmp): $($_.Exception.Message)" | Tee-Object -FilePath $logFile -Append | Out-Null
        }
    }
}

Info "–ì–æ—Ç–æ–≤–æ." | Tee-Object -FilePath $logFile -Append | Out-Null
exit 0


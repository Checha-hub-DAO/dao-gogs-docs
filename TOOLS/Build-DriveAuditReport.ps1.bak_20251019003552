<# ======================================================================
Build-DriveAuditReport.ps1  ¬∑  v1.4_webstatus  (2025-10-18)
–ö–ª—é—á: —Ç–æ—á–Ω—ñ —Å—Ç–∞–Ω–∏ –≤–µ–±-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ (OK / AUTH / 404 / ERR / NA)
====================================================================== #>

[CmdletBinding()]
param(
  [string]$MapPath    = "D:\CHECHA_CORE\C03_LOG\reports\Drive_Map.csv",
  [string]$OutDir     = "D:\CHECHA_CORE\C03_LOG\reports",
  [string]$OwnerEmail = "dao.gogs.ua@gmail.com",
  [switch]$CheckWeb,
  [string]$ReportName = "Drive_Audit_Report",
  [string]$RcloneRemote
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Info([string]$m){ Write-Host "[INFO] $m" -ForegroundColor Cyan }
function Warn([string]$m){ Write-Host "[WARN] $m" -ForegroundColor Yellow }
function Err ([string]$m){ Write-Host "[ERR ] $m" -ForegroundColor Red }

# Helpers (–±–µ–∑ .Count)
function Seq([object]$x){ $x | ForEach-Object { $_ } }
function CountOf([object]$x){ (Seq $x | Measure-Object).Count }
function Get-DateStamp { (Get-Date -Format 'yyyy-MM-dd') }
function Get-FileSha256([string]$p){ if(Test-Path -LiteralPath $p){ (Get-FileHash -Algorithm SHA256 -LiteralPath $p).Hash } }

function Get-DriveIdFromUrl([string]$url){
  if([string]::IsNullOrWhiteSpace($url)){ return $null }
  if($url -match "/folders/([^/?#]+)")   { return $Matches[1] }
  if($url -match "/file/d/([^/?#]+)")    { return $Matches[1] }
  if($url -match "(?:\?|&)id=([^&#]+)")  { return $Matches[1] }
  return $null
}

# –ù–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ–±-—Å—Ç–∞–Ω—É: HEAD ‚Üí fallback GET bytes=0-0, –∑ –ª–æ–≤–ª–µ—é AUTH/404
function Test-DriveUrlStatus([string]$url){
  if([string]::IsNullOrWhiteSpace($url)){ return 'NA' }
  try{
    $resp = Invoke-WebRequest -Uri $url -Method Head -MaximumRedirection 5 -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop
    $code = [int]$resp.StatusCode
    if($code -ge 200 -and $code -lt 300){ return 'OK' }
    if($code -ge 300 -and $code -lt 400){
      $loc = ($resp.Headers['Location'] | Select-Object -First 1)
      if($loc -match 'accounts\.google\.com|signin|ServiceLogin'){ return 'AUTH' }
      return 'OK'
    }
    if($code -in 401,403){ return 'AUTH' }
    if($code -eq 404){ return 'HTTP404' }
  } catch {
    try{
      $headers = @{ Range = 'bytes=0-0' }
      $resp2 = Invoke-WebRequest -Uri $url -Method Get -Headers $headers -MaximumRedirection 5 -UseBasicParsing -TimeoutSec 12 -ErrorAction Stop
      $code2 = [int]$resp2.StatusCode
      if($code2 -lt 400){ return 'OK' }
      if($code2 -in 401,403){ return 'AUTH' }
      if($code2 -eq 404){ return 'HTTP404' }
      return 'ERR'
    } catch {
      $msg = $_.Exception.Message
      if($msg -match 'accounts\.google\.com|signin|ServiceLogin'){ return 'AUTH' }
      return 'ERR'
    }
  }
}

function Test-RcloneAvailable { try{ & rclone version 2>$null | Out-Null; return ($LASTEXITCODE -eq 0) } catch { return $false } }

# 0) –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞
if(-not (Test-Path -LiteralPath $MapPath)){ Err "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ CSV: $MapPath"; exit 2 }
if(-not (Test-Path -LiteralPath $OutDir)){ New-Item -ItemType Directory -Path $OutDir -Force | Out-Null }

# 1) –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV (—Å—Ç–∞–±—ñ–ª—å–Ω–æ)
Info "–ó—á–∏—Ç—É—é –∫–∞—Ä—Ç—É: $MapPath"
$rows = Seq (Import-Csv -LiteralPath $MapPath -ErrorAction Stop)
$rowsCount = CountOf $rows
if($rowsCount -eq 0){ Err "CSV –ø–æ—Ä–æ–∂–Ω—ñ–π: $MapPath"; exit 3 }

$required = @('–ü–∞–ø–∫–∞','–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è','ID (URL)','–ö–∞—Ç–µ–≥–æ—Ä—ñ—è','–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è','–°—Ç–∞—Ç—É—Å')
$first = Seq $rows | Select-Object -First 1
$hdr   = $first.PsObject.Properties.Name
if( (CountOf ($required | Where-Object { $_ -notin $hdr })) -gt 0 ){
  # —Å–ø—Ä–æ–±—É—î–º–æ ';'
  $rows = Seq (Import-Csv -LiteralPath $MapPath -Delimiter ';' -ErrorAction Stop)
  $first = Seq $rows | Select-Object -First 1
  $hdr   = $first.PsObject.Properties.Name
  if( (CountOf ($required | Where-Object { $_ -notin $hdr })) -gt 0 ){
    Err "–£ CSV –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏. –Ñ: $($hdr -join ', ')"; exit 4
  }
}

# 2) rclone
$rcloneAvailable = $false
if($RcloneRemote){ $rcloneAvailable = Test-RcloneAvailable; if(-not $rcloneAvailable){ Warn "rclone –Ω–µ –≤ PATH ‚Äî rclone-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ" } }

# 3) –ó–±–∞–≥–∞—á–µ–Ω–Ω—è
$enriched = @()
foreach($r in $rows){
  $url = [string]$r.'ID (URL)'
  $id  = Get-DriveIdFromUrl $url
  $webStatus = $null
  if($CheckWeb){ $webStatus = Test-DriveUrlStatus $url }

  $rcloneOk = $null
  if($RcloneRemote -and $rcloneAvailable){
    $remotePath = "${RcloneRemote}:/$($r.'–ü–∞–ø–∫–∞')"
    try{ $ls = & rclone lsf $remotePath 2>$null; $rcloneOk = -not [string]::IsNullOrWhiteSpace($ls) } catch { $rcloneOk = $false }
  }

  $enriched += [pscustomobject]@{
    –ü–∞–ø–∫–∞          = $r.'–ü–∞–ø–∫–∞'
    –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è    = $r.'–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è'
    Url            = $url
    DriveId        = $id
    –ö–∞—Ç–µ–≥–æ—Ä—ñ—è      = $r.'–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'
    –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è  = $r.'–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è'
    –°—Ç–∞—Ç—É—Å         = $r.'–°—Ç–∞—Ç—É—Å'
    WebStatus      = $webStatus   # NEW
    RcloneOk       = $rcloneOk
  }
}

# 4) –ú–µ—Ç—Ä–∏–∫–∏
$enriched = Seq $enriched
$total    = CountOf $enriched
$active   = CountOf ( $enriched | Where-Object { $_.–°—Ç–∞—Ç—É—Å -match '–ê–∫—Ç–∏–≤' } )
$partial  = CountOf ( $enriched | Where-Object { $_.–°—Ç–∞—Ç—É—Å -match '—á–∞—Å—Ç–∫|—á–∞—Å—Ç–∫–æ–≤–æ|–£ —Ä–æ–∑—Ä–æ–±—Ü—ñ|–ù–∞–ª–∞—à' } )
$noId     = CountOf ( $enriched | Where-Object { -not $_.DriveId } )

$okWeb    = CountOf ( $enriched | Where-Object { $_.WebStatus -eq 'OK' } )
$authWeb  = CountOf ( $enriched | Where-Object { $_.WebStatus -eq 'AUTH' } )
$notfound = CountOf ( $enriched | Where-Object { $_.WebStatus -eq 'HTTP404' } )
$errWeb   = CountOf ( $enriched | Where-Object { $_.WebStatus -eq 'ERR' } )
$naWeb    = CountOf ( $enriched | Where-Object { $_.WebStatus -eq 'NA' } )
$warnUrl  = $authWeb + $notfound + $errWeb
$rcloneKo = CountOf ( $enriched | Where-Object { $null -ne $_.RcloneOk -and $_.RcloneOk -eq $false } )

# 5) Markdown
$today = Get-DateStamp
$outMd = Join-Path $OutDir ("{0}_{1}.md" -f $ReportName, $today)
Info "–ì–µ–Ω–µ—Ä—É—é –∑–≤—ñ—Ç: $outMd"

$md = New-Object System.Collections.Generic.List[string]
$md.Add("# üß≠ DAO-GOGS ¬∑ Google Drive Audit Report")
$md.Add("")
$md.Add("**–î–∞—Ç–∞:** $today  ")
$md.Add("**–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π:** –°.–ß.  ")
$md.Add("**–û—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–ª–∞—Å–Ω–∏–∫ —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏:** $OwnerEmail  ")
$md.Add("")
$md.Add("---")
$md.Add("")
$md.Add("## 1) –ü—ñ–¥—Å—É–º–æ–∫")
$md.Add("")
$md.Add("| –í—Å—å–æ–≥–æ | –ê–∫—Ç–∏–≤–Ω—ñ | –ß–∞—Å—Ç–∫–æ–≤–æ | –ë–µ–∑ ID | Web OK | Web AUTH | 404 | ERR | rclone NOK |")
$md.Add("|---:|---:|---:|---:|---:|---:|---:|---:|---:|")
$md.Add(("| {0} | {1} | {2} | {3} | {4} | {5} | {6} | {7} | {8} |" -f `
  $total,$active,$partial,$noId,$okWeb,$authWeb,$notfound,$errWeb,$rcloneKo))
$md.Add("")
$md.Add("---")
$md.Add("")
$md.Add("## 2) –î–µ—Ç–∞–ª—ñ –ø–æ –ø–∞–ø–∫–∞—Ö")
$md.Add("")
$md.Add("| –ü–∞–ø–∫–∞ | –ö–∞—Ç–µ–≥–æ—Ä—ñ—è | –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è | –°—Ç–∞—Ç—É—Å | –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è | Drive ID | URL | Web | rclone |")
$md.Add("|---|---|---|---|---|---|---|---:|---:|")

foreach($e in $enriched){
  $webTxt = if($CheckWeb){
    switch($e.WebStatus){
      'OK'      { '‚úÖ' }
      'AUTH'    { 'üîê' }
      'HTTP404' { '‚ùå404' }
      'ERR'     { '‚ö†Ô∏è' }
      default   { '‚Äî' }
    }
  } else { '‚Äî' }
  $rcloneTxt = if($null -eq $e.RcloneOk){ "‚Äî" } elseif($e.RcloneOk){ "‚úÖ" } else { "‚ö†Ô∏è" }
  $did = if($e.DriveId){ $e.DriveId } else { "‚Äî" }
  $url = if($e.Url){ $e.Url } else { "‚Äî" }
  $md.Add(("| {0} | {1} | {2} | {3} | {4} | `{5}` | {6} | {7} | {8} |" -f `
    $e.–ü–∞–ø–∫–∞, $e.–ö–∞—Ç–µ–≥–æ—Ä—ñ—è, $e.–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è, $e.–°—Ç–∞—Ç—É—Å, $e.–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è, $did, $url, $webTxt, $rcloneTxt))
}

$md.Add("")
$md.Add("---")
$md.Add("")
$md.Add("## 3) –î—ñ—ó –Ω–∞ 7 –¥–Ω—ñ–≤")
$md.Add("- –Ø–∫—â–æ –±—ñ–ª—å—à—ñ—Å—Ç—å –ª—ñ–Ω–∫—ñ–≤ 'üîê AUTH' ‚Äî —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å. –í–∏–Ω–æ—Å–∏–º–æ –≤ **–Ω–æ—Ä–º—É**.")
$md.Add("- –†–µ–∞–ª—å–Ω—ñ –ø–æ–º–∏–ª–∫–∏ ‚Äî **‚ùå404** —Ç–∞ **‚ö†Ô∏è ERR**: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ URL –∞–±–æ –º–µ—Ä–µ–∂—É.")
$md.Add("- rclone NOK ‚Üí –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ remote mapping —Ç–∞ –ø—Ä–∞–≤–∞.")
$md.Add("")
$md.Add("_CheCha Core ¬∑ DAO-GOGS_")

$md | Set-Content -LiteralPath $outMd -Encoding UTF8

# 6) SHA256
$sha = Get-FileHash -Algorithm SHA256 -LiteralPath $outMd | Select-Object -ExpandProperty Hash
Info "SHA256: $sha"
Info "–ó–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: $outMd"
Write-Host "[INFO] –ì–æ—Ç–æ–≤–æ (rc=0)" -ForegroundColor Cyan
exit 0

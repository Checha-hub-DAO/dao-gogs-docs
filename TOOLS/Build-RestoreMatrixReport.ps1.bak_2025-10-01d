
#Requires -Version 7.0
<#
.SYNOPSIS
  Build-RestoreMatrixReport.ps1 ‚Äî —î–¥–∏–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ú–∞—Ç—Ä–∏—Ü–µ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (MAT_RESTORE).

.DESCRIPTION
  –í–µ—Ä—Å—ñ—è 1.1.3:
   - –ß–µ–∫-–ª–∏—Å—Ç –¥–Ω—è —Ç–µ–ø–µ—Ä –∑ –ø—Ä–∞–ø–æ—Ä—Ü—è–º–∏ Markdown (`- [ ]`) –∑–∞–º—ñ—Å—Ç—å –±—É–ª–µ—Ç—ñ–≤.
   - –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ Measure-Object, GitBook-—à–∞–±–ª–æ–Ω —ñ -ClearAppend.

.NOTES
  –í–µ—Ä—Å—ñ—è: 1.1.3  |  –ê–≤—Ç–æ—Ä: –°.–ß. + GPT-5 Thinking  |  –õ—ñ—Ü–µ–Ω–∑—ñ—è: CC-BY 4.0
#>

param(
  [string]$CsvDir = "D:\CHECHA_CORE\C07_ANALYTICS",
  [string]$AppendCsvPath,
  [string]$OutMd = "D:\CHECHA_CORE\C06_FOCUS\MAT_RESTORE.md",
  [int]$TopN = 7,
  [switch]$OpenAfter,
  [switch]$ClearAppend
)

Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

function Write-Info([string]$msg) { Write-Host "[INFO]  $msg" }
function Write-Warn([string]$msg) { Write-Host "[WARN]  $msg" -ForegroundColor Yellow }
function Write-Err ([string]$msg) { Write-Host "[ERROR] $msg" -ForegroundColor Red }

# 1) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É
if (-not (Test-Path -LiteralPath $CsvDir)) {
  Write-Err "–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $CsvDir"
  exit 1
}

# 2) –ü–æ—à—É–∫ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ MAT_RESTORE_*.csv
$pattern = "MAT_RESTORE_*.csv"
$files = Get-ChildItem -LiteralPath $CsvDir -Filter $pattern -File | Sort-Object LastWriteTime -Descending
if (-not $files) {
  Write-Err "–£ –∫–∞—Ç–∞–ª–æ–∑—ñ –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –≤–∏–¥—É $pattern"
  exit 2
}

$latest = $files[0].FullName
Write-Info "–û—Å—Ç–∞–Ω–Ω—ñ–π —Ñ–∞–π–ª: $latest"

# 3) –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
$requiredHeaders = @("–ú—ñ—Å—Ü–µ","–õ—é–¥–∏–Ω–∞/–≥—Ä—É–ø–∞","–Ü–¥–µ—è/—Å–∏–º–≤–æ–ª","–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)","–î–∞—Ç–∞")

function Import-CheckedCsv([string]$path, [switch]$WarnIfMissing) {
  if (-not (Test-Path -LiteralPath $path)) {
    if ($WarnIfMissing) {
      Write-Warn "CSV –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $path"
      return @()
    } else {
      throw "CSV –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $path"
    }
  }
  $csv = Import-Csv -LiteralPath $path
  if (-not $csv) {
    Write-Warn "CSV –ø–æ—Ä–æ–∂–Ω—ñ–π: $path"
    return @()
  }
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
  $headers = @()
  if ($csv.Count -gt 0) {
    $headers = $csv[0].psobject.Properties.Name
  } else {
    $firstLine = Get-Content -LiteralPath $path -TotalCount 1 -Encoding UTF8
    if ($firstLine) {
      $headers = $firstLine -split "," | ForEach-Object { $_.Trim('"').Trim() }
    }
  }
  foreach ($h in $requiredHeaders) {
    if ($headers -notcontains $h) {
      throw "–ù–µ–º–∞—î –∫–æ–ª–æ–Ω–∫–∏ '{0}' —É —Ñ–∞–π–ª—ñ {1}" -f $h, $path
    }
  }
  return $csv
}

$data = Import-CheckedCsv $latest

# 4) (–û–ø—Ü—ñ–π–Ω–æ) –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤
$append = @()
if ($AppendCsvPath) {
  Write-Info "–î–æ–¥–∞—é —Ä—è–¥–∫–∏ –∑: $AppendCsvPath"
  $append = Import-CheckedCsv -path $AppendCsvPath -WarnIfMissing
  if (-not $append -or $append.Count -eq 0) {
    Write-Warn "AppendCsvPath –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî APPEND –ø—Ä–æ–ø—É—â–µ–Ω–æ."
  }
}

# 5) –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
function Normalize-Row($row) {
  $r = [ordered]@{
    "–ú—ñ—Å—Ü–µ" = ($row."–ú—ñ—Å—Ü–µ" | ForEach-Object { $_.ToString().Trim() })
    "–õ—é–¥–∏–Ω–∞/–≥—Ä—É–ø–∞" = ($row."–õ—é–¥–∏–Ω–∞/–≥—Ä—É–ø–∞" | ForEach-Object { $_.ToString().Trim() })
    "–Ü–¥–µ—è/—Å–∏–º–≤–æ–ª" = ($row."–Ü–¥–µ—è/—Å–∏–º–≤–æ–ª" | ForEach-Object { $_.ToString().Trim() })
    "–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" = [int]($row."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)")
    "–î–∞—Ç–∞" = if ($row."–î–∞—Ç–∞") { (Get-Date $row."–î–∞—Ç–∞").ToString("yyyy-MM-dd") } else { (Get-Date).ToString("yyyy-MM-dd") }
  }
  if ($r."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" -lt 0) { $r."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" = 0 }
  if ($r."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" -gt 3) { $r."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" = 3 }
  return [pscustomobject]$r
}

$normData = @()
foreach ($row in $data) { $normData += (Normalize-Row $row) }
foreach ($row in $append) { $normData += (Normalize-Row $row) }

# 6) –£–Ω—ñ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
$unique = New-Object System.Collections.Generic.HashSet[string]
$final = New-Object System.Collections.Generic.List[object]
foreach ($r in $normData) {
  $key = "{0}|{1}|{2}|{3}|{4}" -f $r."–ú—ñ—Å—Ü–µ",$r."–õ—é–¥–∏–Ω–∞/–≥—Ä—É–ø–∞",$r."–Ü–¥–µ—è/—Å–∏–º–≤–æ–ª",$r."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)",$r."–î–∞—Ç–∞"
  if ($unique.Add($key)) { $final.Add($r) | Out-Null }
}

# 7) –ó–∞–ø–∏—Å –Ω–æ–≤–æ–≥–æ CSV (–∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å, —è–∫—â–æ —Ç–æ–π —Å–∞–º–∏–π –¥–µ–Ω—å)
$today = Get-Date -Format "yyyy-MM-dd"
$outCsv = Join-Path $CsvDir ("MAT_RESTORE_{0}.csv" -f $today)
Write-Info "–ó–∞–ø–∏—Å—É—é: $outCsv"
$Utf8Bom = New-Object System.Text.UTF8Encoding($true)
[System.IO.File]::WriteAllText($outCsv, ($final | ConvertTo-Csv -NoTypeInformation | Out-String), $Utf8Bom)

# 8) –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—å
function To-MdTable($rows) {
  if (-not $rows -or $rows.Count -eq 0) { return "" }
  $md = @()
  $md += "| –ú—ñ—Å—Ü–µ | –õ—é–¥–∏–Ω–∞/–≥—Ä—É–ø–∞ | –Ü–¥–µ—è/—Å–∏–º–≤–æ–ª | –û—Ü—ñ–Ω–∫–∞ (0‚Äì3) | –î–∞—Ç–∞ |"
  $md += "|---|---|---|---:|---|"
  foreach ($r in $rows) {
    $md += ("| {0} | {1} | {2} | {3} | {4} |" -f `
      ($r."–ú—ñ—Å—Ü–µ" -replace "\|","/"), `
      ($r."–õ—é–¥–∏–Ω–∞/–≥—Ä—É–ø–∞" -replace "\|","/"), `
      ($r."–Ü–¥–µ—è/—Å–∏–º–≤–æ–ª" -replace "\|","/"), `
      $r."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)", `
      $r."–î–∞—Ç–∞")
  }
  return ($md -join "`n")
}

$sorted = $final | Sort-Object @{ Expression="–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)"; Descending=$true }, @{ Expression="–î–∞—Ç–∞"; Descending=$true }
$top = $sorted | Select-Object -First $TopN
$byPlace = $final | Group-Object "–ú—ñ—Å—Ü–µ" | Sort-Object Name

# 9) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
$total = ($final | Measure-Object).Count
$cnt3  = ($final | Where-Object { $_."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" -eq 3 } | Measure-Object).Count
$cnt2  = ($final | Where-Object { $_."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" -eq 2 } | Measure-Object).Count
$cnt1  = ($final | Where-Object { $_."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" -eq 1 } | Measure-Object).Count
$cnt0  = ($final | Where-Object { $_."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" -eq 0 } | Measure-Object).Count
$buildTs = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'

# 10) –ß–µ–∫-–ª–∏—Å—Ç –¥–Ω—è (–æ—Ü—ñ–Ω–∫–∞ = 3), –≥—Ä—É–ø–∞ –∑–∞ "–ú—ñ—Å—Ü–µ" –∑ –ø—Ä–∞–ø–æ—Ä—Ü—è–º–∏ - [ ]
$prio3 = $final | Where-Object { $_."–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)" -eq 3 }
$checklist = @()
$checklist += "## ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –¥–Ω—è (–æ—Ü—ñ–Ω–∫–∞ = 3)"
if (($prio3 | Measure-Object).Count -gt 0) {
  $grp = $prio3 | Group-Object "–ú—ñ—Å—Ü–µ" | Sort-Object Name
  foreach ($g in $grp) {
    $checklist += "### " + $g.Name
    foreach ($item in $g.Group) {
      $checklist += ("- [ ] " + ($item."–Ü–¥–µ—è/—Å–∏–º–≤–æ–ª"))
    }
    $checklist += ""
  }
} else {
  $checklist += "_–ù–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç –ø–æ—Ä–æ–∂–Ω—å–æ._"
}
$checklist += "---"

# 11) GitBook-—à–∞–±–ª–æ–Ω (–∫–∞—Ä–∫–∞—Å)
$tplHeader = @"
# –ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è

> **–î–∞—Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è:** $today  
> **–ê–≤—Ç–æ—Ä:** –°–µ—Ä–≥—ñ–π –ß–µ–ß–∞ (–°.–ß.)  
> **–î–∂–µ—Ä–µ–ª–æ –ø—Ä–∞–≤–¥–∏:** `D:\CHECHA_CORE\C07_ANALYTICS\MAT_RESTORE_YYYY-MM-DD.csv`

---

## üß≠ –©–æ —Ü–µ —Ç–∞–∫–µ
–ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è ‚Äî —Ü–µ —î–¥–∏–Ω–∏–π –∂–∏–≤–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤, —ñ–¥–µ–π —ñ —Ñ–æ–∫—É—Å—ñ–≤.  
–í–æ–Ω–∞ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ CSV-—Ñ–∞–π–ª—É —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown, –≥–æ—Ç–æ–≤–æ–º—É –¥–ª—è GitBook.

- **–ú—ñ—Å—Ü–µ** ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–±–æ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: G45 ‚Äî –©–∏—Ç, Adaptive Presentation, –°–ö–î-GOGS).  
- **–õ—é–¥–∏–Ω–∞ / –≥—Ä—É–ø–∞** ‚Äî —Ö—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–±–æ –¥–æ –∫–æ–≥–æ –Ω–∞–ª–µ–∂–∏—Ç—å –∑–∞–ø–∏—Å.  
- **–Ü–¥–µ—è / —Å–∏–º–≤–æ–ª** ‚Äî —Å—É—Ç—å –¥—ñ—ó —á–∏ –∫–æ–Ω—Ü–µ–ø—Ç.  
- **–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)** ‚Äî —Ä—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É (0 = –∞—Ä—Ö—ñ–≤–Ω–µ, 3 = –∫—Ä–∏—Ç–∏—á–Ω–µ/—Ç–µ—Ä–º—ñ–Ω–æ–≤–µ).  
- **–î–∞—Ç–∞** ‚Äî –∫–æ–ª–∏ –±—É–ª–æ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ.  

---

## üîù –Ø–∫ —á–∏—Ç–∞—Ç–∏ —Ç–æ–ø-–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏
- –í–≥–æ—Ä—ñ –∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–æ–≥–æ (–æ—Ü—ñ–Ω–∫–∞ 3 ‚Üí 2 ‚Üí 1).  
- –¶–µ –Ω–µ –Ω–æ–≤–∞ –º–∞—Ç—Ä–∏—Ü—è, –∞ **–≤–∏—Ç—è–≥ —ñ–∑ –¥–∂–µ—Ä–µ–ª–∞ –ø—Ä–∞–≤–¥–∏**.  
- –£—Å—ñ –∑–º—ñ–Ω–∏ –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è –∑–±–∏—Ä–∞—é—Ç—å—Å—è –≤ `INBOX\MAT_RESTORE_APPEND.csv` —ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—Ç–µ–≥—Ä—É—é—Ç—å—Å—è —É —Ñ—ñ–Ω–∞–ª—å–Ω—É –º–∞—Ç—Ä–∏—Ü—é.

---
"@

$tplStats = @"
## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: **$total**
- –û—Ü—ñ–Ω–∫–∞ 3: **$cnt3**
- –û—Ü—ñ–Ω–∫–∞ 2: **$cnt2**
- –û—Ü—ñ–Ω–∫–∞ 1: **$cnt1**
- –û—Ü—ñ–Ω–∫–∞ 0: **$cnt0**
- –ß–∞—Å –∑–±—ñ—Ä–∫–∏: **$buildTs**

---
"@

$tplTech = @"
## üõ† –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ
- –°–∫—Ä–∏–ø—Ç: `Build-RestoreMatrixReport.ps1`  
- –ö–∞—Ç–∞–ª–æ–≥ CSV: `D:\CHECHA_CORE\C07_ANALYTICS`  
- Markdown: `D:\CHECHA_CORE\C06_FOCUS\MAT_RESTORE.md`  
- –ö–æ–¥–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: UTF-8 –∑ BOM (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Excel —ñ GitBook).  

---
¬© –°.–ß. ¬∑ DAO-GOGS
"@

# 12) –ó–±—ñ—Ä–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ Markdown
$mdParts = @()
$mdParts += $tplHeader
$mdParts += "## üìä –¢–æ–ø-–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏"
$mdParts += (To-MdTable $top)
$mdParts += "`n---`n"
$mdParts += "## üìÇ –£—Å—ñ –∑–∞–ø–∏—Å–∏ –∑–∞ –º—ñ—Å—Ü—è–º–∏"
foreach ($g in $byPlace) {
  $mdParts += "### " + $g.Name
  $mdParts += (To-MdTable ($g.Group | Sort-Object @{ Expression="–û—Ü—ñ–Ω–∫–∞ (0‚Äì3)"; Descending=$true }, @{ Expression="–î–∞—Ç–∞"; Descending=$true }))
  $mdParts += ""
}
$mdParts += ($checklist -join "`n")
$mdParts += $tplStats
$mdParts += $tplTech

$summaryText = ($mdParts -join "`n")

# 13) –ó–∞–ø–∏—Å MD
$mdDir = Split-Path -Parent $OutMd
if (-not (Test-Path -LiteralPath $mdDir)) {
  New-Item -ItemType Directory -Path $mdDir -Force | Out-Null
}
[System.IO.File]::WriteAllText($OutMd, $summaryText, $Utf8Bom)
Write-Info "Markdown –∑–±–µ—Ä–µ–∂–µ–Ω–æ: $OutMd"

# 14) (–û–ø—Ü—ñ–æ–Ω–Ω–æ) –û—á–∏—Å—Ç–∫–∞ INBOX –ø—ñ—Å–ª—è APPEND
if ($AppendCsvPath -and $ClearAppend) {
  if (Test-Path -LiteralPath $AppendCsvPath) {
    $header = "–ú—ñ—Å—Ü–µ,–õ—é–¥–∏–Ω–∞/–≥—Ä—É–ø–∞,–Ü–¥–µ—è/—Å–∏–º–≤–æ–ª,–û—Ü—ñ–Ω–∫–∞ (0‚Äì3),–î–∞—Ç–∞`r`n"
    [System.IO.File]::WriteAllText($AppendCsvPath, $header, $Utf8Bom)
    Write-Info "–û—á–∏—â–µ–Ω–æ INBOX APPEND (–∑–∞–ª–∏—à–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫): $AppendCsvPath"
  } else {
    Write-Warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ APPEND ‚Äî —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $AppendCsvPath"
  }
}

if ($OpenAfter) {
  if ($IsWindows) {
    Start-Process $OutMd
  } else {
    Write-Warn "OpenAfter –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ –Ω–∞ Windows"
  }
}

Write-Host ""
Write-Host "=== Done ==="
Write-Host "CSV: $outCsv"
Write-Host "MD : $OutMd"

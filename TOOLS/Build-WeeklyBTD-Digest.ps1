<#
.SYNOPSIS
  –§–æ—Ä–º—É—î —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π Markdown-–¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ª–æ–≥–æ–º post-commit:
  D:\CHECHA_CORE\C03_LOG\BTD-Manifest-Commits.log

.DESCRIPTION
  - –ü–∞—Ä—Å–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∫–æ–º—ñ—Ç—ñ–≤ (SHA, –¥–∞—Ç–∞, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, MANIFEST_SHA256).
  - –î—ñ–∞–ø–∞–∑–æ–Ω: [WeekStart, WeekEnd], –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
    (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫ 00:00 ‚Üí –Ω–µ–¥—ñ–ª—è 23:59:59 —É —Ç–≤–æ—î–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ).
  - –ì–µ–Ω–µ—Ä—É—î: REPORTS\BTD_Manifest_Digest_YYYY-MM-DD_to_YYYY-MM-DD.md
  - –î–æ–¥–∞—î/–æ–Ω–æ–≤–ª—é—î REPORTS\CHECKSUMS.txt

.PARAMETER WeekStart
  –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è (DateTime). –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π.

.PARAMETER WeekEnd
  –ö—ñ–Ω–µ—Ü—å —Ç–∏–∂–Ω—è (DateTime). –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π.

.EXAMPLE
  pwsh -NoProfile -ExecutionPolicy Bypass -File "D:\CHECHA_CORE\TOOLS\Build-WeeklyBTD-Digest.ps1"

.EXAMPLE
  pwsh -NoProfile -File "D:\CHECHA_CORE\TOOLS\Build-WeeklyBTD-Digest.ps1" -WeekStart '2025-10-01' -WeekEnd '2025-10-07'
#>

[CmdletBinding()]
param(
    [datetime]$WeekStart,
    [datetime]$WeekEnd
)

# --- –®–ª—è—Ö–∏ ---
$RepoRoot = 'D:\CHECHA_CORE'
$LogPath = Join-Path $RepoRoot 'C03_LOG\BTD-Manifest-Commits.log'
$ReportsDir = Join-Path $RepoRoot 'REPORTS'

# --- –û–±—á–∏—Å–ª–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: –ü–Ω‚Äì–ù–¥) ---
# –ü—Ä–∏–π–º–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å (Europe/Kyiv —É —Ç–≤–æ—î–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ)
if (-not $WeekStart -or -not $WeekEnd) {
    $now = Get-Date
    # –∑—Å—É–≤ –¥–æ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è
    $dow = ([int]$now.DayOfWeek) # 0=Sunday ‚Ä¶ 6=Saturday
    $offsetToMonday = switch ($dow) { 0 { -6 } 1 { 0 } default { 1 - $dow } }
    $mondayThisWeek = (Get-Date ($now.Date)).AddDays($offsetToMonday)

    # –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å (–æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π)
    $WeekStart = $mondayThisWeek.AddDays(-7)
    $WeekEnd = $WeekStart.AddDays(7).AddSeconds(-1)
}

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
$null = New-Item -ItemType Directory -Force -Path $ReportsDir
if (-not (Test-Path -LiteralPath $LogPath)) {
    throw "–õ–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $LogPath"
}

# --- –ü–∞—Ä—Å–µ—Ä –ª–æ–≥—É ---
# –§–æ—Ä–º–∞—Ç –æ—á—ñ–∫—É—î—Ç—å—Å—è —è–∫ —É post-commit hook:
# ------------------------------------------------------------
# Commit: <hash>
# Date  : 2025-10-07 15:45:12 +0300
# Msg   : ...
# MANIFEST_SHA256: <hash or (missing)>

$raw = Get-Content -LiteralPath $LogPath -Raw
$blocks = ($raw -split '[-]{60,}').Where({ $_.Trim() })

$items = foreach ($b in $blocks) {
    $lines = ($b -split "`r?`n").Where({ $_.Trim() })
    $commit = ($lines | Where-Object { $_ -like 'Commit:*' }) -replace '^Commit:\s*', ''
    $dtStr = ($lines | Where-Object { $_ -like 'Date  :*' }) -replace '^Date\s*:', ''
    $msg = ($lines | Where-Object { $_ -like 'Msg   :*' }) -replace '^Msg\s*:', ''
    $msha = ($lines | Where-Object { $_ -like 'MANIFEST_SHA256:*' }) -replace '^MANIFEST_SHA256:\s*', ''

    # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É; —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    $dt = $null
    [void][datetime]::TryParse($dtStr.Trim(), [ref]$dt)

    if ($dt) {
        [pscustomobject]@{
            CommitHash  = $commit.Trim()
            CommitDate  = $dt
            Message     = $msg.Trim()
            ManifestSHA = $msha.Trim()
        }
    }
}

# --- –§—ñ–ª—å—Ç—Ä –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º ---
$itemsInRange = $items | Where-Object { $_.CommitDate -ge $WeekStart -and $_.CommitDate -le $WeekEnd } |
    Sort-Object CommitDate

# --- –ê–≥—Ä–µ–≥–∞—Ü—ñ—è ---
$total = $itemsInRange.Count
$missing = ($itemsInRange | Where-Object { $_.ManifestSHA -eq '(missing)' -or [string]::IsNullOrWhiteSpace($_.ManifestSHA) }).Count
$uniqueCommits = ($itemsInRange.CommitHash | Where-Object { $_ } | Select-Object -Unique).Count
$uniqueMsgs = ($itemsInRange.Message    | Where-Object { $_ } | Select-Object -Unique).Count

# --- –ü–æ–±—É–¥–æ–≤–∞ Markdown ---
$wStartStr = $WeekStart.ToString('yyyy-MM-dd')
$wEndStr = $WeekEnd.ToString('yyyy-MM-dd')
$outName = "BTD_Manifest_Digest_${wStartStr}_to_${wEndStr}.md"
$outPath = Join-Path $ReportsDir $outName

$md = @()
$md += "# üßæ BTD Manifest ‚Äî –©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç"
$md += ""
$md += "**–ü–µ—Ä—ñ–æ–¥:** ${wStartStr} ‚Üí ${wEndStr}"
$md += ""
$md += "‚Äì –ó–∞–≥–∞–ª–æ–º –∑–∞–ø–∏—Å—ñ–≤: **$total**"
$md += "‚Äì –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–º—ñ—Ç—ñ–≤: **$uniqueCommits**"
$md += "‚Äì –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: **$uniqueMsgs**"
$md += "‚Äì MANIFEST_SHA256 missing: **$missing**"
$md += ""
$md += "## –ü–æ–¥—ñ—ó"
$md += ""
if ($total -eq 0) {
    $md += "_–ó–∞ –ø–µ—Ä—ñ–æ–¥ –ø–æ–¥—ñ–π –Ω–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ._"
}
else {
    $md += "| –î–∞—Ç–∞/—á–∞—Å | Commit | Msg | MANIFEST_SHA256 |"
    $md += "|---|---|---|---|"
    foreach ($it in $itemsInRange) {
        $dtCell = $it.CommitDate.ToString('yyyy-MM-dd HH:mm:ss')
        $hash = if ($it.CommitHash) { $it.CommitHash.Substring(0, [Math]::Min(12, $it.CommitHash.Length)) } else { "(n/a)" }
        $msg = if ($it.Message) { $it.Message.Replace('|', '\|') } else { "(n/a)" }
        $sha = if ($it.ManifestSHA) { $it.ManifestSHA } else { "(missing)" }
        $md += "| $dtCell | `$hash | $msg | `$sha |"
    }
}
$md += ""
$md += "## –ü—ñ–¥—Å—É–º–æ–∫"
$md += "- **–û—Ö–æ–ø–ª–µ–Ω–Ω—è**: $wStartStr ‚Üí $wEndStr"
$md += "- **–õ–æ–∫–∞–ª—å–Ω–∏–π TZ**: $(Get-TimeZone).Id"
$md += "- **–ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss zzz')"
$md += ""
$md += "‚Äî _–°.–ß._"

$md -join "`r`n" | Set-Content -LiteralPath $outPath -Encoding UTF8

# --- –û–Ω–æ–≤–∏—Ç–∏ REPORTS\CHECKSUMS.txt ---
$checksPath = Join-Path $ReportsDir 'CHECKSUMS.txt'
$line = "{0}  {1}" -f ((Get-FileHash -Algorithm SHA256 -LiteralPath $outPath).Hash), ("REPORTS\" + $outName)
if (Test-Path -LiteralPath $checksPath) {
    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É (—è–∫—â–æ —î)
    $all = Get-Content -LiteralPath $checksPath
    $filtered = $all | Where-Object { $_ -notmatch [regex]::Escape($outName) }
    $filtered + $line | Set-Content -LiteralPath $checksPath -Encoding UTF8
}
else {
    $line | Set-Content -LiteralPath $checksPath -Encoding UTF8
}

Write-Host "[OK] Report: $outPath"
Write-Host "[OK] CHECKSUMS updated: $checksPath"


# Import utils
$utilsPath = "D:\CHECHA_CORE\TOOLS\CheCha.Utils.psm1"
if (Test-Path -LiteralPath $utilsPath) { Import-Module $utilsPath -Force }
else { Write-Host "[WARN] Utils not found at $utilsPath (continuing)"; }

<# 
.SYNOPSIS
  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Weekly-–∑–≤—ñ—Ç—É –∑–∞ ISO-—Ç–∏–∂–¥–µ–Ω—å (Wxx), –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç, –ø–∞–∫—É–≤–∞–Ω–Ω—è –∑ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º.

.PARAMETER ISOWeek
  –ù–æ–º–µ—Ä ISO-—Ç–∏–∂–Ω—è (1..53). –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ.

.PARAMETER Year
  –†—ñ–∫ ISO-—Ç–∏–∂–Ω—è. –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ.

.PARAMETER ExtraInclude
  –î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∫–ª–∞–¥–µ–Ω–Ω—è (PNG/SVG G-Map —Ç–æ—â–æ).

.EXAMPLE
  pwsh -NoProfile -ExecutionPolicy Bypass `
    -File D:\CHECHA_CORE\TOOLS\Build-WeeklyReport.ps1 `
    -ISOWeek 44 -Year 2025 -GitCommit -Push -VerboseSummary `
    -ExtraInclude "D:\CHECHA_CORE\DAO-GOGS\docs\architecture\visuals\G-Map_v2.0.png"
#>

[CmdletBinding()]
param(
  [int]$ISOWeek,
  [int]$Year,
  [string]$RepoRoot        = "D:\CHECHA_CORE",
  [string]$ArchitectureDir = "D:\CHECHA_CORE\DAO-GOGS\docs\architecture",
  [string]$ReportsDir      = "D:\CHECHA_CORE\DAO-GOGS\docs\reports",
  [string]$OutDir          = "D:\CHECHA_CORE\C03_LOG\reports",
  [string[]]$ExtraInclude  = @(),
  [string]$Version         = "v2.0",
  [string]$ReleaseDate     = (Get-Date -Format 'yyyy-MM-dd'),
  [switch]$DryRun,
  [switch]$GitCommit,
  [switch]$Push,
  [switch]$VerboseSummary
)

# optional: config merge
$cfgPath = "D:\CHECHA_CORE\TOOLS\dao.config.json"
if (Test-Path -LiteralPath $cfgPath) {
  $cfg = Get-Content -LiteralPath $cfgPath -Raw | ConvertFrom-Json
  if (-not $RepoRoot)        { $RepoRoot        = $cfg.RepoRoot }
  if (-not $ArchitectureDir) { $ArchitectureDir = $cfg.ArchitectureDir }
  if (-not $ReportsDir)      { $ReportsDir      = $cfg.ReportsDir }
  if (-not $OutDir)          { $OutDir          = $cfg.OutDir }
  if ($Version -eq "v2.0")   { $Version         = $cfg.Version }
}

function Log([string]$m,[string]$lvl="INFO"){ $ts=Get-Date -Format 'yyyy-MM-dd HH:mm:ss'; Write-Host "[$lvl] $ts $m" }

# ---- 1) ISO Week helpers (Europe/Kyiv) ----
function Get-IsoWeekStartEnd([int]$y,[int]$w){
  # ISO: —Ç–∏–∂–¥–µ–Ω—å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≤ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, —Ç–∏–∂–¥–µ–Ω—å 1 ‚Äî —Ç–æ–π, —â–æ –º—ñ—Å—Ç–∏—Ç—å 4 —Å—ñ—á–Ω—è.
  $tz = [System.TimeZoneInfo]::FindSystemTimeZoneById("FLE Standard Time") # Europe/Kyiv (Windows id)
  # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —á–µ—Ç–≤–µ—Ä –ø–µ—Ä—à–æ–≥–æ —Ç–∏–∂–Ω—è (4 —Å—ñ—á–Ω—è)
  $jan4Utc = [datetime]::SpecifyKind([datetime]"$y-01-04", 'Utc')
  $jan4Kyiv = [System.TimeZoneInfo]::ConvertTimeFromUtc($jan4Utc,$tz)
  # –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ —Ç–∏–∂–Ω—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å 4 —Å—ñ—á–Ω—è:
  $dow = [int]$jan4Kyiv.DayOfWeek; if($dow -eq 0){ $dow = 7 }
  $monWeek1 = $jan4Kyiv.AddDays(1 - $dow)
  $start = $monWeek1.AddDays(7 * ($w - 1))
  $end   = $start.AddDays(6)
  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —á–∞—Å–∏:
  $start = Get-Date $start.Date
  $end   = Get-Date $end.Date
  [pscustomobject]@{ Start=$start; End=$end }
}

# –ê–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ ISO-—Ç–∏–∂–Ω—è/—Ä–æ–∫—É, —è–∫—â–æ –Ω–µ –ø–æ–¥–∞–Ω–æ
if(-not $ISOWeek -or -not $Year){
  $now = Get-Date
  $cul = [System.Globalization.CultureInfo]::GetCultureInfo("uk-UA")
  $cal = $cul.DateTimeFormat.Calendar
  $rule= [System.Globalization.CalendarWeekRule]::FirstFourDayWeek
  $dow = [System.DayOfWeek]::Monday
  $ISOWeek = $cal.GetWeekOfYear($now,$rule,$dow)
  $Year    = $now.Year
  # —è–∫—â–æ –ø–µ—Ä—à—ñ –¥–Ω—ñ —Å—ñ—á–Ω—è –≤—Ö–æ–¥—è—Ç—å –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ ISO-—Ç–∏–∂–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∫—É
  if($ISOWeek -ge 52 -and $now.Month -eq 1){ $Year-- }
}

$span = Get-IsoWeekStartEnd -y $Year -w $ISOWeek
$wTag = ('W{0:00}' -f $ISOWeek)
$reportName = "DAO-GOGS_Weekly_Report_${wTag}.md"

Log "Weekly: $wTag ($($span.Start.ToString('yyyy-MM-dd')) ‚Üí $($span.End.ToString('yyyy-MM-dd'))) / Year: $Year"

# ---- 2) Ensure dirs ----
foreach($p in @($RepoRoot,$ArchitectureDir,$ReportsDir,$OutDir)){
  if (!(Test-Path -LiteralPath $p)){
    New-Item -ItemType Directory -Force -Path $p | Out-Null
    Log "Created: $p"
  }
}

# ---- 3) Create/update Weekly Markdown ----
$weeklyPath = Join-Path $ReportsDir $reportName
if(-not (Test-Path -LiteralPath $weeklyPath)){
  $md = @"
---
title: "DAO-GOGS ¬∑ Weekly Report ¬∑ $wTag"
subtitle: "–û–≥–ª—è–¥ –∑–∞ $($span.Start.ToString('dd.MM.yyyy'))‚Äì$($span.End.ToString('dd.MM.yyyy')) (Europe/Kyiv)"
author: "–°.–ß."
created: $((Get-Date).ToString('yyyy-MM-dd'))
updated: $((Get-Date).ToString('yyyy-MM-dd'))
status: "Draft"
tags: [DAO-GOGS, weekly, $wTag, analytics, CheChaCore]
version: "$wTag-$Year"
description: "–©–æ—Ç–∏–∂–Ω–µ–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ-–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –æ–≥–ª—è–¥ —Å–∏—Å—Ç–µ–º–∏ DAO-GOGS."
---

# üß≠ DAO-GOGS ¬∑ Weekly Report ¬∑ $wTag

- **–ü–µ—Ä—ñ–æ–¥:** $($span.Start.ToString('dd.MM.yyyy'))‚Äì$($span.End.ToString('dd.MM.yyyy'))  
- **–°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏:** ‚¨ú Draft ‚¨õ Final  
- **–î–∂–µ—Ä–µ–ª–∞:** INDEX v2.0 (G01‚ÄìG44), ITETA, LeaderIntel, MAT_RESTORE, DAO-FORMS, DAO-MEDIA.

## 1) Executive Summary
- ‚úÖ ‚Ä¶
- ‚úÖ ‚Ä¶
- ‚ö†Ô∏è ‚Ä¶

## 2) –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤ (G01‚ÄìG44)
| –ö–æ–¥ | –°—Ç–∞—Ç—É—Å | –ó–º—ñ–Ω–∞ | –í–ø–ª–∏–≤ | –í–ª–∞—Å–Ω–∏–∫ | –î–∞—Ç–∞ |
|-----|--------|-------|-------|---------|------|
| G07 | ‚úÖ Active | ‚Ä¶ | ‚Ä¶ | ‚Ä¶ | ‚Ä¶ |
| ‚Ä¶  | ‚Ä¶ | ‚Ä¶ | ‚Ä¶ | ‚Ä¶ | ‚Ä¶ |

## 3) –ú–µ—Ç—Ä–∏–∫–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
### 3.1 –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–Ω—è | Œî | –¶—ñ–ª—å | –ö–æ–º–µ–Ω—Ç–∞—Ä |
|---------|----------|---|------|----------|
| Tasks done | ‚Ä¶ | ‚Ä¶ | ‚Ä¶ | ‚Ä¶ |

### 3.2 DAO-MEDIA (G04/G35)
| –ü–æ–∫–∞–∑–Ω–∏–∫ | –ó–Ω–∞—á–µ–Ω–Ω—è | Œî | –ö–æ–º–µ–Ω—Ç–∞—Ä |
|----------|----------|---|----------|
| –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó | ‚Ä¶ | ‚Ä¶ | ‚Ä¶ |

### 3.3 DAO-FORMS (G36)
| –§–æ—Ä–º–∞ | –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π | –°—Ç–∞—Ç—É—Å | –ù–æ—Ç–∞—Ç–∫–∞ |
|-------|------------|--------|---------|
| ‚Ä¶ | ‚Ä¶ | Open/Closed | ‚Ä¶ |

## 4) –†—ñ—à–µ–Ω–Ω—è —Ç–∞ –ø–æ–ª—ñ—Ç–∏–∫–∏
- R-1: ‚Ä¶

## 5) –†–∏–∑–∏–∫–∏ —Ç–∞ –±–ª–æ–∫–µ—Ä–∏
| ID | –†–∏–∑–∏–∫/–ë–ª–æ–∫–µ—Ä | –Ü–º–æ–≤—ñ—Ä–Ω. | –í–ø–ª–∏–≤ | –í–ª–∞—Å–Ω–∏–∫ | –ü–ª–∞–Ω |
|----|--------------|----------|-------|---------|------|
| RS-01 | ‚Ä¶ | Mid | High | ‚Ä¶ | ‚Ä¶ |

## 6) –ü–ª–∞–Ω –Ω–∞ $([string]::Format('W{0:00}', $ISOWeek+1)) 
- üéØ ‚Ä¶

## üîí –ü—ñ–¥–ø–∏—Å —ñ –∫–æ–Ω—Ç—Ä–æ–ª—å
**–ü—ñ–¥–ø–∏—Å:** –°.–ß.  
**SHA-256:** _–∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó_  
**–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π:** DAO-GOGS MAIN ‚Üí `docs/reports/`  
**–î–∞—Ç–∞:** $((Get-Date).ToString('yyyy-MM-dd'))
"@
  Set-Content -LiteralPath $weeklyPath -Encoding UTF8 -Value $md
  Log "Weekly created: $weeklyPath"
}else{
  (Get-Item $weeklyPath).LastWriteTime = Get-Date
  Log "Weekly exists ‚Üí touch timestamp: $weeklyPath"
}

# ---- 4) Collect extras (weekly + optional) ----
$extras = @($weeklyPath)
foreach($mask in $ExtraInclude){
  if ([string]::IsNullOrWhiteSpace($mask)) { continue }
  $resolved = Get-ChildItem -LiteralPath $mask -ErrorAction SilentlyContinue -File
  if (-not $resolved) { $resolved = Get-ChildItem $mask -ErrorAction SilentlyContinue -File }
  if ($resolved) {
    $extras += $resolved.FullName
    foreach($f in $resolved){ Log "Extra include: $($f.FullName)" }
  } else {
    Log "ExtraInclude not found: $mask" "WARN"
  }
}

# ---- 5) Invoke main packer (expects ExtraInclude support) ----
$builder = Join-Path $RepoRoot "TOOLS\Build-DAOIndexPackage.ps1"
if (!(Test-Path -LiteralPath $builder)){ throw "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ $builder" }

$args = @(
  "-ArchitectureDir", $ArchitectureDir,
  "-OutDir",          $OutDir,
  "-Version",         $Version,
  "-ReleaseDate",     $ReleaseDate
)
if ($DryRun)         { $args += "-DryRun" }
if ($GitCommit)      { $args += "-GitCommit" }
if ($Push)           { $args += "-Push" }
if ($VerboseSummary) { $args += "-VerboseSummary" }
if ($extras.Count -gt 0) {
  $args += "-ExtraInclude"
  $args += $extras
}

Log "Invoke Build-DAOIndexPackage.ps1 for $wTag"
& pwsh -NoProfile -ExecutionPolicy Bypass -File $builder @args
$ec = $LASTEXITCODE
if ($ec -ne 0){ Log "Builder exit code: $ec" "ERR"; exit $ec }

Log "Weekly $wTag packaged OK"
exit 0

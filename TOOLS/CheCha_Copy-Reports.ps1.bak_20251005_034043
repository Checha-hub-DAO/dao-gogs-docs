<# =======================================================================
  CheCha_Copy-Reports.ps1 (v1.1)
  –ö–æ–ø—ñ—é—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∑–≤—ñ—Ç–∏ —É –∞—Ä—Ö—ñ–≤ –∑ –¥–∞—Ç–æ—é + –ª–æ–≥—É–≤–∞–Ω–Ω—è + (–æ–ø—Ü.) ZIP.
======================================================================= #>

[CmdletBinding()]
param(
  [string[]] $SourcePaths = @(
    "D:\CHECHA_CORE\EXPORTS",
    "D:\CHECHA_CORE\REPORTS\_staging",
    "$env:USERPROFILE\Downloads"
  ),
  [string] $DestRoot = "D:\CHECHA_CORE\REPORTS",
  [string] $NamePrefix = "CheCha_Report",
  [string] $DateStamp = (Get-Date -Format 'yyyy-MM-dd'),
  [int]    $StagingKeepDays = 0,
  [switch] $MakeZip = $false
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

# ---- 0) –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ -------------------
if (-not (Test-Path $DestRoot)) {
  New-Item -ItemType Directory -Force -Path $DestRoot | Out-Null
}

$script:logPath = Join-Path $DestRoot "REPORTS_COPY.log"
if (-not (Test-Path $script:logPath)) {
  New-Item -ItemType File -Force -Path $script:logPath | Out-Null
}

$destDay = Join-Path $DestRoot $DateStamp
New-Item -ItemType Directory -Force -Path $destDay | Out-Null

function Write-Log([string]$msg) {
  if ([string]::IsNullOrWhiteSpace($script:logPath)) {
    $script:logPath = Join-Path $env:TEMP "REPORTS_COPY.log"
    if (-not (Test-Path $script:logPath)) {
      New-Item -ItemType File -Force -Path $script:logPath | Out-Null
    }
  }
  $line = "[{0}] {1}" -f (Get-Date -Format 'yyyy-MM-dd HH:mm:ss'), $msg
  Add-Content -Path $script:logPath -Value $line
  Write-Host $line
}

Write-Log "‚ñ∂Ô∏è START CheCha_Copy-Reports.ps1 (Date=$DateStamp)"

# ---- 1) –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ -----------------------------------
$targets = @(
  @{ pattern = 'CheCha_Report_Digest.pdf';   out = "$NamePrefix`_$DateStamp.pdf" },
  @{ pattern = 'CheCha_Report_Digest.png';   out = "$NamePrefix`_$DateStamp.png" },
  @{ pattern = 'CheCha_Report_Compact.png';  out = "$NamePrefix`_${DateStamp}_compact.png" }
)

# ---- 2) –ü–æ—à—É–∫ —ñ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è ---------------------------------------------
foreach ($t in $targets) {
  $candidates = @()

  foreach ($sp in $SourcePaths) {
    if ([string]::IsNullOrWhiteSpace($sp)) { continue }
    if (-not (Test-Path $sp)) {
      Write-Log "‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–º–∞ —à–ª—è—Ö—É): $sp"
      continue
    }
    $found = Get-ChildItem -Path $sp -Filter $t.pattern -File -ErrorAction SilentlyContinue
    if ($found) { $candidates += $found }
  }

  if (-not $candidates) {
    Write-Log "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª: $($t.pattern)"
    continue
  }

  $best = $candidates | Sort-Object LastWriteTime -Descending | Select-Object -First 1
  $destFile = Join-Path $destDay $t.out
  Copy-Item -Path $best.FullName -Destination $destFile -Force
  Write-Log "‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: $($best.FullName) ‚Üí $destFile (mtime=$($best.LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss')))"
}

# ---- 3) (–û–ø—Ü.) –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è —É _staging -----------------------------------
if ($StagingKeepDays -gt 0) {
  foreach ($sp in $SourcePaths) {
    if ($sp -like "*\_staging" -and (Test-Path $sp)) {
      $threshold = (Get-Date).AddDays(-$StagingKeepDays)
      $old = Get-ChildItem $sp -File | Where-Object { $_.LastWriteTime -lt $threshold }
      $count = ($old | Measure-Object).Count
      if ($count -gt 0) {
        $old | Remove-Item -Force
        Write-Log "üßπ –ü—Ä–∏–±—Ä–∞–Ω–æ —É _staging: $count —Ñ–∞–π–ª—ñ–≤ —Å—Ç–∞—Ä—ñ—à–µ $StagingKeepDays –¥–Ω."
      } else {
        Write-Log "üßπ _staging: –Ω–µ–º–∞—î —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è."
      }
    }
  }
}

# ---- 4) (–û–ø—Ü.) ZIP –∞—Ä—Ö—ñ–≤ –¥–Ω—è -------------------------------------------
if ($MakeZip) {
  $zipPath = Join-Path $DestRoot ("{0}.zip" -f (Split-Path $destDay -Leaf))
  if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
  Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
  [System.IO.Compression.ZipFile]::CreateFromDirectory($destDay, $zipPath)
  Write-Log "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ ZIP: $zipPath"
}

Write-Log "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —É: $destDay"

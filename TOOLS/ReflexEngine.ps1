<# ========================================================================
  ReflexEngine.ps1  ‚Äî  CheCha CORE ‚Ä¢ Flight 4.11
  –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: —â–æ–¥–µ–Ω–Ω–∏–π ‚Äú—Ä–µ—Ñ–ª–µ–∫—Å‚Äù —Å–∏—Å—Ç–µ–º–∏ ‚Äî –∞–Ω–∞–ª—ñ–∑ –ª–æ–≥—ñ–≤/–º–∞—Ç—Ä–∏—Ü—å, –º–∞–ø–∞ –∑–¥–æ—Ä–æ–≤‚Äô—è –∑–∞–¥–∞—á,
  –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ —Ç–∞ —Ä–µ–ø–æ—Ä—Ç —É Markdown + JSON.

  –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —à–ª—è—Ö: D:\CHECHA_CORE\TOOLS\ReflexEngine.ps1
  –ó–∞–ø—É—Å–∫:  pwsh -NoProfile -ExecutionPolicy Bypass -File D:\CHECHA_CORE\TOOLS\ReflexEngine.ps1

  –í–∏—Ö—ñ–¥–Ω—ñ –∫–æ–¥–∏:
    0 ‚Äî OK (–±–µ–∑ —Å—É—Ç—Ç—î–≤–∏—Ö –∑–∞—É–≤–∞–∂–µ–Ω—å)
    1 ‚Äî WARN (–∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, –∞–ª–µ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–±–æ—ó–≤ –Ω–µ–º–∞)
    2 ‚Äî ERROR (–∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–±–æ—ó –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏)

  –ê–≤—Ç–æ—Ä: –°.–ß. / CheCha
========================================================================= #>

[CmdletBinding()]
param(
  # –ö–æ—Ä—ñ–Ω—å —Å–∏—Å—Ç–µ–º–∏ (–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É)
  [string]$Root = "D:\CHECHA_CORE",

  # –î–∞—Ç–∏ (ISO). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ.
  [string]$Date = (Get-Date -Format 'yyyy-MM-dd'),

  # –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä—é–≤–∞–Ω–∏—Ö –∑–∞–¥–∞—á (–º–æ–∂–Ω–∞ –¥–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏)
  [string[]]$Tasks = @(
    "MorningPanel-RestoreTop3",
    "Evening-RestoreLog",
    "LeaderIntel-Daily",
    "CHECHA_Weekly_Publish"
  ),

  # –ú‚Äô—è–∫–∏–π —Ä–µ–∂–∏–º: –Ω–µ –∫–∏–¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏, –∞ –∑–≤–æ–¥–∏—Ç–∏ —ó—Ö —É WARN
  [switch]$Soft
)

# -------------------------- –ü–ê–†–ê–ú–ï–¢–†–ò –®–õ–Ø–•–Ü–í ---------------------------
$Paths = [ordered]@{
  Root              = (Resolve-Path -LiteralPath $Root).Path
  Focus             = Join-Path $Root "C06_FOCUS"
  Analytics         = Join-Path $Root "C07_ANALYTICS"
  ReflexOut         = Join-Path $Root "C07_ANALYTICS\Reflex"
  LogsRoot          = Join-Path $Root "C03_LOG"
  RestoreLog        = Join-Path $Root "C06_FOCUS\FOCUS_RestoreLog.md"
  MatRestoreCsv     = Join-Path $Root "C07_ANALYTICS\MAT_RESTORE.csv"
  MatBalanceCsv     = Join-Path $Root "C07_ANALYTICS\MAT_BALANCE.csv"
}

# –ó–∞–±–µ–∑–ø–µ—á–∏–º–æ –≤–∏—Ö—ñ–¥–Ω—ñ —Ç–µ–∫–∏
$null = New-Item -ItemType Directory -Force -Path $Paths.ReflexOut, $Paths.LogsRoot | Out-Null

# –õ–æ–≥-—Ñ–∞–π–ª
$Stamp   = Get-Date -Format 'yyyyMMdd_HHmmss'
$LogPath = Join-Path $Paths.LogsRoot ("Reflex_"+$Stamp+".log")

# ------------------------- –£–¢–ò–õ–Ü–¢–ò –õ–û–ì–£–í–ê–ù–ù–Ø ---------------------------
function Write-ReflexLog {
  param([string]$Level = "INFO", [string]$Message)
  $line = "[{0}] [{1}] {2}" -f (Get-Date -Format 'yyyy-MM-dd HH:mm:ss'), $Level, $Message
  $line | Tee-Object -FilePath $LogPath -Append
}

function Safe-ImportCsv {
  param([string]$Path)
  if (!(Test-Path -LiteralPath $Path)) {
    Write-ReflexLog "WARN" "CSV –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $Path"
    return @()
  }
  try   { return Import-Csv -LiteralPath $Path -Delimiter ',' }
  catch { Write-ReflexLog "ERROR" "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: $Path :: $($_.Exception.Message)"; return @() }
}

function Get-FileTail {
  param([string]$Path, [int]$Tail = 50)
  if (!(Test-Path -LiteralPath $Path)) { return @() }
  try   { return Get-Content -LiteralPath $Path -Tail $Tail }
  catch { Write-ReflexLog "WARN" "–ù–µ –≤–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É: $Path :: $($_.Exception.Message)"; return @() }
}

# ----------------------- –ê–ù–ê–õ–Ü–ó –ú–ê–¢–†–ò–¶–¨/–õ–û–ì–Ü–í --------------------------
function Analyze-RestoreLog {
  [CmdletBinding()]
  param([string]$RestoreLogPath, [int]$Tail = 200)

  $lines = Get-FileTail -Path $RestoreLogPath -Tail $Tail
  $result = [ordered]@{
    Found          = $false
    UpdatesToday   = 0
    LastUpdate     = $null
    Hints          = @()
  }
  if ($lines.Count -gt 0) {
    $result.Found = $true
    # –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–µ—Ä: —à—É–∫–∞—î–º–æ —Ä—è–¥–∫–∏ "Updated status for YYYY-MM-DD" —Ç–∞ —ñ–Ω—à—ñ –º–∞—Ä–∫–µ—Ä–∏
    $dateTag = (Get-Date -Format 'yyyy-MM-dd')
    $result.UpdatesToday = ($lines | Select-String -SimpleMatch $dateTag).Count
    $last = ($lines | Select-String -Pattern '^\-\s*\[\d{4}\-\d{2}\-\d{2}\s+\d{2}\:\d{2}\:\d{2}\]').Matches
    if ($last.Count -gt 0) {
      # –í—ñ–∑—å–º–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ –¥–∞—Ç–æ—é/—á–∞—Å–æ–º
      $raw = ($lines | Select-String -Pattern '^\-\s*\[\d{4}\-\d{2}\-\d{2}\s+\d{2}\:\d{2}\:\d{2}\]').Line | Select-Object -Last 1
      $result.LastUpdate = $raw
    }
    if ($result.UpdatesToday -eq 0) { $result.Hints += "–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —Ñ—ñ–∫—Å–∞—Ü—ñ–π —É RestoreLog." }
  } else {
    $result.Hints += "RestoreLog –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."
  }
  return $result
}

function Analyze-MatrixDelta {
  <#
    –ü–æ—Ä—ñ–≤–Ω—é—î –æ—Å—Ç–∞–Ω–Ω—ñ 2 –∑–Ω—ñ–º–∫–∏ (–∑–∞ –∫–æ–ª–æ–Ω–∫–æ—é LastWriteTime –∞–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏),
    —è–∫—â–æ CSV –≤–µ–¥–µ—Ç—å—Å—è —è–∫ —Å—Ç—Ä—ñ–º ‚Äî –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –∫—Ä–∞–π–Ω—ñ N –∑–∞–ø–∏—Å—ñ–≤.
  #>
  [CmdletBinding()]
  param(
    [Parameter(Mandatory)][array]$RestoreCsv,
    [Parameter(Mandatory)][array]$BalanceCsv
  )
  $out = [ordered]@{
    RestoreCount = $RestoreCsv.Count
    BalanceCount = $BalanceCsv.Count
    Signals      = @()
  }
  if ($RestoreCsv.Count -eq 0) { $out.Signals += "MAT_RESTORE.csv ‚Äî –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö."; }
  if ($BalanceCsv.Count -eq 0) { $out.Signals += "MAT_BALANCE.csv ‚Äî –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö."; }

  # –ü—Ä–æ—Å—Ç–∏–π –µ–≤—Ä–∏—Å—Ç–∏—á–Ω–∏–π —Å–∏–≥–Ω–∞–ª: —è–∫—â–æ —É Restore —Å—É—Ç—Ç—î–≤–∏–π –ø—Ä–∏—Ä—ñ—Å—Ç –∞–±–æ —Å–ø–∞–¥ —Ä—è–¥–∫—ñ–≤
  if ($RestoreCsv.Count -gt 10) {
    $prev = $RestoreCsv.Count - 10
    $diff = $RestoreCsv.Count - $prev
    if ([math]::Abs($diff) -ge 10) {
      $out.Signals += "RestoreMatrix —à–≤–∏–¥–∫–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è (¬±10 –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä—ñ–æ–¥)."
    }
  }
  return $out
}

# ----------------------- –ú–ê–ü–ê –ó–î–û–†–û–í‚Äô–Ø –ó–ê–î–ê–ß ---------------------------
function Get-TaskHealthMap {
  [CmdletBinding()]
  param([string[]]$Names)

  $map = @()
  foreach ($n in $Names) {
    try {
      $t = Get-ScheduledTask -TaskName $n -ErrorAction Stop
      $i = $t | Get-ScheduledTaskInfo
      $map += [pscustomobject]@{
        TaskName      = $n
        State         = $t.State
        LastRunTime   = $i.LastRunTime
        NextRunTime   = $i.NextRunTime
        LastTaskResult= $i.LastTaskResult
        Ok            = ($i.LastTaskResult -eq 0)
      }
    }
    catch {
      Write-ReflexLog "WARN" "–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: $n"
      $map += [pscustomobject]@{
        TaskName      = $n
        State         = "Unknown"
        LastRunTime   = $null
        NextRunTime   = $null
        LastTaskResult= $null
        Ok            = $false
      }
    }
  }
  return $map
}

# ------------------------- –†–ï–ü–û–†–¢/–°–ï–†–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø -------------------------
function New-ReflexReport {
  [CmdletBinding()]
  param(
    [Parameter(Mandatory)]$RestoreInfo,
    [Parameter(Mandatory)]$MatrixInfo,
    [Parameter(Mandatory)]$TaskHealth,
    [Parameter(Mandatory)][string]$OutDir,
    [Parameter(Mandatory)][string]$Date
  )

  if (!(Test-Path -LiteralPath $OutDir)) { $null = New-Item -ItemType Directory -Force -Path $OutDir }

  $mdName = Join-Path $OutDir ("ReflexReport_{0}.md" -f ($Date -replace '-',''))
  $jsonName = Join-Path $OutDir ("ReflexReport_{0}.json" -f ($Date -replace '-',''))

  $warns = @()
  $errors = @()

  # –§—ñ–∫—Å—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è/–ø–æ–º–∏–ª–∫–∏ –∑–∞ —Å–∏–≥–Ω–∞–ª–∞–º–∏
  if ($RestoreInfo.Hints.Count -gt 0) { $warns += $RestoreInfo.Hints }
  if ($MatrixInfo.Signals.Count -gt 0) { $warns += $MatrixInfo.Signals }
  if (($TaskHealth | Where-Object { -not $_.Ok }).Count -gt 0) {
    $warns += "–Ñ –∑–∞–¥–∞—á—ñ —ñ–∑ LastTaskResult ‚â† 0 –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∏–º —Å—Ç–∞–Ω–æ–º."
  }

  # ---------- Markdown ----------
  $md = @()
  $md += "# üîÑ Reflex Report ‚Äî $Date"
  $md += ""
  $md += "## 1) RestoreLog"
  $md += "- Found: **$($RestoreInfo.Found)**"
  $md += "- UpdatesToday: **$($RestoreInfo.UpdatesToday)**"
  if ($RestoreInfo.LastUpdate) { $md += "- LastUpdate: `$($RestoreInfo.LastUpdate)`" }
  if ($RestoreInfo.Hints.Count -gt 0) {
    $md += "- Hints:"
    foreach($h in $RestoreInfo.Hints){ $md += "  - $h" }
  }

  $md += ""
  $md += "## 2) Matrices"
  $md += "- Restore rows: **$($MatrixInfo.RestoreCount)**"
  $md += "- Balance rows: **$($MatrixInfo.BalanceCount)**"
  if ($MatrixInfo.Signals.Count -gt 0) {
    $md += "- Signals:"
    foreach($s in $MatrixInfo.Signals){ $md += "  - $s" }
  }

  $md += ""
  $md += "## 3) Task Health Map"
  $md += ""
  $md += "| Task | State | LastRun | NextRun | Result | OK |"
  $md += "|:-----|:------|:--------|:--------|:------:|:--:|"
  foreach($t in $TaskHealth){
    $md += ("| {0} | {1} | {2} | {3} | {4} | {5} |" -f
      $t.TaskName,
      $t.State,
      ($t.LastRunTime  ? ($t.LastRunTime.ToString("yyyy-MM-dd HH:mm:ss")) : "-"),
      ($t.NextRunTime  ? ($t.NextRunTime.ToString("yyyy-MM-dd HH:mm:ss")) : "-"),
      ($t.LastTaskResult -as [string]),
      ($t.Ok ? "‚úÖ" : "‚ùó"))
  }

  $md += ""
  $md += "## 4) Summary"
  if ($warns.Count -eq 0) {
    $md += "- Status: **OK**"
  } else {
    $md += "- Status: **WARN**"
    foreach($w in $warns){ $md += "  - $w" }
  }

  $mdText = $md -join "`r`n"
  Set-Content -LiteralPath $mdName -Encoding UTF8 -Value $mdText

  # ---------- JSON ----------
  $payload = [ordered]@{
    Date       = $Date
    Restore    = $RestoreInfo
    Matrices   = $MatrixInfo
    TaskHealth = $TaskHealth
    Status     = @{"Ok" = ($warns.Count -eq 0); "Warns" = $warns }
    LogPath    = $LogPath
  }
  ($payload | ConvertTo-Json -Depth 6) | Set-Content -LiteralPath $jsonName -Encoding UTF8

  return [pscustomobject]@{
    MdPath   = $mdName
    JsonPath = $jsonName
    Warns    = $warns
    Errors   = $errors
  }
}

# ============================= MAIN =====================================
$exitCode = 0
try {
  Write-ReflexLog "INFO" "=== ReflexEngine —Å—Ç–∞—Ä—Ç ==="
  Write-ReflexLog "INFO" ("Root: {0}" -f $Paths.Root)

  # 1) RestoreLog
  $restoreInfo = Analyze-RestoreLog -RestoreLogPath $Paths.RestoreLog
  Write-ReflexLog "INFO" ("RestoreLog Found={0}, UpdatesToday={1}" -f $restoreInfo.Found, $restoreInfo.UpdatesToday)

  # 2) –ú–∞—Ç—Ä–∏—Ü—ñ
  $restoreCsv = Safe-ImportCsv -Path $Paths.MatRestoreCsv
  $balanceCsv = Safe-ImportCsv -Path $Paths.MatBalanceCsv
  $matrixInfo = Analyze-MatrixDelta -RestoreCsv $restoreCsv -BalanceCsv $balanceCsv
  Write-ReflexLog "INFO" ("Matrices: Restore={0}, Balance={1}" -f $matrixInfo.RestoreCount, $matrixInfo.BalanceCount)

  # 3) Task Health Map
  $taskHealth = Get-TaskHealthMap -Names $Tasks
  $bad = $taskHealth | Where-Object { -not $_.Ok }
  if ($bad.Count -gt 0) {
    Write-ReflexLog "WARN" ("–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ –∑–∞–¥–∞—á—ñ: {0}" -f (($bad | Select-Object -ExpandProperty TaskName) -join ', '))
  }

  # 4) –†–µ–ø–æ—Ä—Ç
  $report = New-ReflexReport -RestoreInfo $restoreInfo -MatrixInfo $matrixInfo -TaskHealth $taskHealth -OutDir $Paths.ReflexOut -Date $Date
  Write-ReflexLog "INFO" ("Report MD: {0}" -f $report.MdPath)
  Write-ReflexLog "INFO" ("Report JSON: {0}" -f $report.JsonPath)

  if ($report.Errors.Count -gt 0) { $exitCode = 2 }
  elseif ($report.Warns.Count -gt 0) { $exitCode = 1 }
  else { $exitCode = 0 }

  Write-ReflexLog "INFO" ("ExitCode={0}" -f $exitCode)
}
catch {
  Write-ReflexLog "ERROR" ("–ù–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {0}" -f $_.Exception.Message)
  if ($Soft) { $exitCode = 1 } else { $exitCode = 2 }
}
finally {
  Write-ReflexLog "INFO" "=== ReflexEngine –∑–∞–≤–µ—Ä—à–µ–Ω–æ ==="
  exit $exitCode
}

# ======================== –î–û–í–Ü–î–ö–ê: –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ =========================
<#
# 1) –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç—É:
pwsh -NoProfile -ExecutionPolicy Bypass -File D:\CHECHA_CORE\TOOLS\ReflexEngine.ps1

# 2) –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 07:35):
$pwsh = (Get-Command pwsh).Source
schtasks /Create /SC DAILY /ST 07:35 /TN "ReflexEngine-Daily" /F /TR `
 "$pwsh -NoProfile -ExecutionPolicy Bypass -File D:\CHECHA_CORE\TOOLS\ReflexEngine.ps1"

# 3) –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫:
schtasks /Run /TN "ReflexEngine-Daily"

# 4) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞:
schtasks /Query /TN "ReflexEngine-Daily" /V /FO LIST
#>

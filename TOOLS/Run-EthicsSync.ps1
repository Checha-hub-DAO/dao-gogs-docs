<#
.SYNOPSIS
  Run-EthicsSync.ps1 ‚Äî –∞—É–¥–∏—Ç –µ—Ç–∏—á–Ω–æ–≥–æ –±–ª–æ–∫—É C02_ETHICS —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É.
.DESCRIPTION
  –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ C02_ETHICS, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á—ñ–≤ data_sovereignty —É C06_FOCUS,
  –æ–Ω–æ–≤–ª–µ–Ω–Ω—è changelog —ñ —Ñ–æ—Ä–º—É—î –∑–≤—ñ—Ç ETHICS_SYNC —É C03_LOG\reports.
#>

param(
    [string]$CoreRoot = "D:\CHECHA_CORE",
    [switch]$Pdf,
    [switch]$Silent
)

$ErrorActionPreference = "Stop"
$ts = Get-Date -Format "yyyy-MM-dd_HHmmss"
$day = Get-Date -Format "yyyy-MM-dd"
$ethics = Join-Path $CoreRoot "C02_ETHICS"
$focus  = Join-Path $CoreRoot "C06_FOCUS"
$logDir = Join-Path $CoreRoot "C03_LOG\reports"
$template = Join-Path $CoreRoot "C03_LOG\templates\ETHICS_SYNC_TEMPLATE.md"

# --- ensure dirs ---
if (!(Test-Path $logDir)) { New-Item -ItemType Directory -Force -Path $logDir | Out-Null }

function W($m, $lvl="INFO") {
    $c = if($lvl -eq "ERROR"){"Red"} elseif($lvl -eq "WARN"){"Yellow"} else {"Gray"}
    Write-Host "[$lvl] $m" -ForegroundColor $c
}

# --- collect status ---
$reportLines = @()
$ok = $true

function Add-Check($item, $okStatus, $note) {
    $emoji = if($okStatus){"‚úÖ"} else {"‚ö†Ô∏è"}
    $reportLines += "| $item | $emoji | $note |"
    if(-not $okStatus){ Set-Variable -Name ok -Value $false -Scope 1 }
}

W "Scanning C02_ETHICS..."
$ethicsFiles = "C02_ETHICS.md","C02-INDEX.md","C02-CHANGELOG.md","C02.1_EthicalMatrix.md","C02.2_LawOfHarmony.md","C02.3_LawOfIntegrity.md","C02.4_DataSovereignty.md"
foreach($f in $ethicsFiles){
    $path = Join-Path $ethics $f
    Add-Check $f (Test-Path $path) ("Checked at $(Get-Date -Format 'HH:mm:ss')")
}

# --- check data_sovereignty tags ---
$focusFiles = Get-ChildItem $focus -Recurse -Filter *.md
$missing = @()
foreach($f in $focusFiles){
    $txt = Get-Content $f.FullName -Raw
    if($txt -notmatch "data_sovereignty: true"){ $missing += $f.Name }
}
if($missing.Count -eq 0){
    Add-Check "C06_FOCUS tags" $true "All files contain data_sovereignty:true"
} else {
    Add-Check "C06_FOCUS tags" $false ("Missing in: " + ($missing -join ', '))
}

# --- report template ---
if(!(Test-Path $template)){
    W "Template not found, using inline version" "WARN"
    $templateContent = @"
# ETHICS SYNC REPORT (autogenerated)
Date: $day
"@
} else {
    $templateContent = (Get-Content $template -Raw) -replace "{{date}}", $day
}

# --- insert table ---
$table = ($reportLines -join "`r`n")
$body = @"
$templateContent

## üîç –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ
$table

---

**–ü—ñ–¥–ø–∏—Å:**  
–°.–ß. | CHECHA_CORE | ETHICS_SYNC  
üúÇ $day
"@

$outMd = Join-Path $logDir "ETHICS_SYNC_$day.md"
$outPdf = [System.IO.Path]::ChangeExtension($outMd, ".pdf")
$outSha = "$outPdf.sha256.txt"

$body | Out-File -Encoding UTF8 $outMd
W "Markdown report created: $outMd" "OK"

# --- optional PDF ---
if($Pdf){
    try {
        $css = Join-Path $CoreRoot "TOOLS\styles\checha_dark.css"
        pandoc $outMd -o $outPdf --pdf-engine=wkhtmltopdf --css $css --metadata title="ETHICS SYNC REPORT" --standalone
        if(Test-Path $outPdf){
            $hash = (Get-FileHash -Algorithm SHA256 -LiteralPath $outPdf).Hash
            "$hash  $(Split-Path $outPdf -Leaf)" | Out-File -Encoding ASCII $outSha
            W "PDF + SHA256 created: $outPdf" "OK"
        }
    } catch {
        W "PDF generation failed: $($_.Exception.Message)" "ERROR"
    }
}

if(-not $Silent){
    Write-Host "`n=== ETHICS SYNC SUMMARY ===" -ForegroundColor Cyan
    $reportLines | ForEach-Object { Write-Host $_ }
    if($ok){ Write-Host "`n‚úÖ Ethics sync OK" -ForegroundColor Green } else { Write-Host "`n‚ö†Ô∏è Issues detected" -ForegroundColor Yellow }
}

exit 0

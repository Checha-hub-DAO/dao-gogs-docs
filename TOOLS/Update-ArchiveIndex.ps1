[CmdletBinding()]
param(
    [string]$ReportsRoot = "D:\CHECHA_CORE\REPORTS",
    [string]$ArchiveRel = "ARCHIVE",
    [string]$IndexFile = "ARCHIVE_INDEX.md",
    [switch]$ComputeHash,         # –î–æ–¥–∞—Ç–∏ SHA-256 –ø–æ—Ä—É—á —ñ–∑ –∫–æ–∂–Ω–∏–º ZIP
    [switch]$RelativeLinks,       # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ $ReportsRoot
    [switch]$GitAdd,              # –ó—Ä–æ–±–∏—Ç–∏ git add REPORTS/ARCHIVE_INDEX.md
    [switch]$DryRun               # –ü–æ–∫–∞–∑–∞—Ç–∏, —â–æ –±—É–¥–µ –∑–∞–ø–∏—Å–∞–Ω–æ, –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
)

function Fail($m) { Write-Error $m; exit 1 }
function HashSHA256([string]$Path) {
    try {
        $h = Get-FileHash -LiteralPath $Path -Algorithm SHA256
        return $h.Hash
    }
    catch { return $null }
}

# 1) –®–ª—è—Ö–∏
$archivePath = Join-Path $ReportsRoot $ArchiveRel
$indexPath = Join-Path $ReportsRoot $IndexFile

if (-not (Test-Path -LiteralPath $archivePath)) {
    Fail "–ü–∞–ø–∫—É –∞—Ä—Ö—ñ–≤—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $archivePath"
}

# 2) –ó–±—ñ—Ä ZIP-—Ñ–∞–π–ª—ñ–≤
$zips = Get-ChildItem -LiteralPath $archivePath -Recurse -File -Include *.zip |
    Sort-Object FullName

if (-not $zips) {
    Write-Warning "ZIP-—Ñ–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É $archivePath"
}

# 3) –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ —Ä–æ–∫–æ–º (—Å–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —Ä—ñ–∫ –∑ —ñ–º–µ–Ω—ñ; —è–∫—â–æ –Ω—ñ ‚Äî –±–µ—Ä–µ–º–æ LastWriteTime.Year)
function Get-YearFromNameOrTime($fi) {
    $name = $fi.Name
    $m = [regex]::Match($name, '\b(20\d{2})[-_\.]')
    if ($m.Success) { return [int]$m.Groups[1].Value }
    return $fi.LastWriteTime.Year
}

$grouped = $zips | Group-Object { Get-YearFromNameOrTime $_ } | Sort-Object Name

# 4) –ü–æ–±—É–¥–æ–≤–∞ Markdown
$lines = @()
$lines += "# üì¶ –ê—Ä—Ö—ñ–≤ –∑–≤—ñ—Ç—ñ–≤ DAO-GOGS"
$lines += ""
$lines += "–¶–µ–π —Ñ–∞–π–ª —î —ñ–Ω–¥–µ–∫—Å–æ–º —É—Å—ñ—Ö ZIP-–∞—Ä—Ö—ñ–≤—ñ–≤ —É –ø–∞–ø—Ü—ñ `REPORTS/$ArchiveRel`."
$lines += "–û–Ω–æ–≤–ª–µ–Ω–æ: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
$lines += ""
$lines += "---"
$lines += ""
$lines += "## üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"
$lines += ""
$lines += "- **–†—ñ–∫/–ú—ñ—Å—è—Ü—å** ‚Üí ZIP-–∞—Ä—Ö—ñ–≤–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ):"
$lines += "  - `WeeklyChecklist_YYYY-MM-DD_to_YYYY-MM-DD.zip`"
$lines += "  - `BTD_Structure_Test_YYYY-MM-DD_HH-mm-ss.zip`"
$lines += "- `CHECKSUMS.txt` —É –∫–æ—Ä–µ–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å."
$lines += ""
$lines += "---"
$lines += ""
$lines += "## üìë –Ü–Ω–¥–µ–∫—Å –∞—Ä—Ö—ñ–≤—ñ–≤"
$lines += ""

foreach ($g in $grouped) {
    $year = $g.Name
    $lines += "### $year"
    foreach ($fi in ($g.Group | Sort-Object Name)) {
        $relPath = if ($RelativeLinks) {
            # –í—ñ–¥–Ω–æ—Å–Ω–æ $ReportsRoot
            [IO.Path]::GetRelativePath($ReportsRoot, $fi.FullName) -replace '\\', '/'
        }
        else {
            $fi.FullName
        }
        $display = $fi.Name
        if ($ComputeHash) {
            $sha = HashSHA256 $fi.FullName
            if ($sha) {
                $lines += "- [$display]($relPath) ‚Äî `SHA256:$($sha.Substring(0,12))‚Ä¶`"
      } else {
        $lines += "- [$display]($relPath)"
      }
    } else {
      $lines += "- [$display]($relPath)"
    }
  }
  $lines += ""  # –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è —Ä–æ–∫—É
}

if (-not $zips) {
  $lines += "_–ù–∞—Ä–∞–∑—ñ ZIP-–∞—Ä—Ö—ñ–≤—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ._"
  $lines += ""
}

$lines += "> üîÑ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º `TOOLS/Update-ArchiveIndex.ps1`."
$lines += ""
$lines += "---"
$lines += ""
$lines += "## üöÄ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏"
$lines += ""
$lines += "- [ ] –ê–≤—Ç–æ–∑–∞–ª–∏–≤–∫–∞ –∞—Ä—Ö—ñ–≤—ñ–≤ —É —Ä–µ–ª—ñ–∑–∏ GitHub –∞–±–æ GitHub Pages."
$lines += "- [ ] –ü–æ–≤–Ω–∏–π SHA256 (–Ω–µ –ª–∏—à–µ –ø—Ä–µ—Ñ—ñ–∫—Å) —É –æ–∫—Ä–µ–º—ñ–π —Ç–∞–±–ª–∏—Ü—ñ."
$lines += "- [ ] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —ñ–º–µ–Ω—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω–∞–º."
$lines += ""
$md = $lines -join "`r`n"

# 5) –ó–∞–ø–∏—Å –∞–±–æ DryRun
if ($DryRun) {
  Write-Host "---- DRY RUN: $indexPath ----" -ForegroundColor Yellow
  Write-Host $md
  Write-Host "---- END ----" -ForegroundColor Yellow
} else {
  $md | Set-Content -LiteralPath $indexPath -Encoding UTF8
  Write-Host "[OK] –û–Ω–æ–≤–ª–µ–Ω–æ $indexPath"
  if ($GitAdd) {
    & git add $indexPath 2>$null | Out-Null
    if ($LASTEXITCODE -eq 0) { Write-Host "[OK] git add $IndexFile" }
    else { Write-Warning "git add –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é (–ø–µ—Ä–µ–≤—ñ—Ä –¥–æ—Å—Ç—É–ø/—Ä–æ–±–æ—á—É —Ç–µ–∫—É)." }
  }
}

